<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小雅米，来来往往这么多人，有多少是圆梦后才衣锦还乡的呢？</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-01-29T03:48:07.024Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>kimoyami</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>三元环/四元环计数</title>
    <link href="http://yoursite.com/2020/01/29/%E4%B8%89%E5%85%83%E7%8E%AF-%E5%9B%9B%E5%85%83%E7%8E%AF%E8%AE%A1%E6%95%B0/"/>
    <id>http://yoursite.com/2020/01/29/三元环-四元环计数/</id>
    <published>2020-01-29T02:48:24.000Z</published>
    <updated>2020-01-29T03:48:07.024Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概论"><a href="#概论" class="headerlink" title="概论"></a>概论</h3><p>三元环/四元环问题计数其实很简单，写一写主要是怕自己忘了，但这玩意确实一看就懂。</p><h3 id="三元环计数"><a href="#三元环计数" class="headerlink" title="三元环计数"></a>三元环计数</h3><h4 id="无向图"><a href="#无向图" class="headerlink" title="无向图"></a>无向图</h4><p>最朴素的暴力枚举，考虑枚举三个点，看之间是否有边，复杂度<script type="math/tex">O(n^3)</script>，或者枚举一条边，再枚举一个点，复杂度<script type="math/tex">O(mn)</script>，如果是稀疏图，n，m同阶的情况下我们对这个复杂度不是很满意。</p><p>一个比较简单的做法就是给边定向，我们考虑让所有边从小度数的指向大度数的，按照如下步骤找三元环：<br>1、枚举一条边<br>2、将边的其中一个点连接的其他点全部打上标记<br>3、枚举这条边的另一个的邻点，如果打上了标记就计数</p><p>来分析一下复杂度，这里就要用图中经常用到的一个分大小点的方法来分析，我们将度数大于<script type="math/tex">\sqrt(m)</script>的称为大点，其它点称为小点，很显然的是大点个数是<script type="math/tex">O(sqrt(m))</script>级别的，小点个数是<script type="math/tex">O(n)</script>级别的（这里我们认为n，m同阶）。考虑大点被枚举的次数，大点因为是被小点指向的，所以被枚举的次数是<script type="math/tex">O(m)</script>级别的，所有大点被枚举次数是<script type="math/tex">O(m\sqrt(m))</script>级别的。再来考虑小点，小点因为原图上度数小于<script type="math/tex">O(\sqrt(m))</script>，所以定向后能指向它的点也最多是<script type="math/tex">O(\sqrt(m))</script>级别的，总的复杂度也是<script type="math/tex">O(m\sqrt(m))</script>级别的。</p><a id="more"></a><p>无向图三元环计数就这么简单，当然主要是针对n，m同阶的情况，基本接近于完全图的话最坏复杂度就和暴力没啥差别了。<br><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6184" target="_blank" rel="noopener">Counting Stars</a></p><div><div class="fold_hider"><div class="close hider_title">代码</div></div><div class="fold"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;ll&gt; vl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;pii&gt; vp;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> db eps = <span class="number">1e-10</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ep emplace</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> copy(a, b) memcpy(a, b, sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PA cout &lt;&lt; <span class="meta-string">"pass\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x &amp; -x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) x.begin(), x.end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TM cout &lt;&lt; db(clock()) / CLOCKS_PER_SEC &lt;&lt; <span class="meta-string">'\n'</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">233</span>;</span><br><span class="line"><span class="keyword">int</span> deg[maxn];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">vp G[maxn];</span><br><span class="line"><span class="keyword">int</span> u[maxn * <span class="number">2</span>], v[maxn * <span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> cnt[maxn * <span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> pos[maxn * <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m))&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            G[i].clear();</span><br><span class="line">            deg[i] = vis[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">            cnt[i] = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u[i], &amp;v[i]);</span><br><span class="line">            deg[u[i]]++, deg[v[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(deg[u[i]] &gt; deg[v[i]] || (deg[u[i]] == deg[v[i]] &amp;&amp; u[i] &gt; v[i])) G[v[i]].eb(u[i], i);</span><br><span class="line">            <span class="keyword">else</span> G[u[i]].eb(v[i], i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;it : G[u[i]]) vis[it.fi] = i, pos[it.fi] = it.se;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;j : G[v[i]])&#123;</span><br><span class="line">                <span class="keyword">if</span>(vis[j.fi] == i) cnt[i]++, cnt[j.se]++, cnt[pos[j.fi]]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ll res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(cnt[i] &gt; <span class="number">1</span>) res += <span class="number">1l</span>l * cnt[i] * (cnt[i] - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, res);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h4 id="有向图"><a href="#有向图" class="headerlink" title="有向图"></a>有向图</h4><p>你把它按无向图做，对于每个找出来的三元环看看原来的有向图是否满足不就好了？</p><h4 id="竞赛图"><a href="#竞赛图" class="headerlink" title="竞赛图"></a>竞赛图</h4><p>竞赛图有特别牛逼的公式</p><script type="math/tex; mode=display">\tbinom{n}{3} - \sum_{i = 1}^n\tbinom{outdeg_i}{2}</script><p>很显然任意两条出边在一个点上不可能形成三元环，就这么简单容斥一下就好了</p><h3 id="四元环"><a href="#四元环" class="headerlink" title="四元环"></a>四元环</h3><p>四元环计数找了找资料发现都是18年焦作站之后才有的？19年WC上还专门出了一道四元环的题目。</p><h4 id="无向图-1"><a href="#无向图-1" class="headerlink" title="无向图"></a>无向图</h4><p>四元环计数的思路就比较神奇了，不知道怎么想出来的，先说做法。<br>1、将原图按度数从小到大排序，得到每个点的rank<br>2、将原图的边定向，由小的rank指向大的<br>3、枚举一个点u，再枚举<strong>原图</strong>上u的一个邻点v，再枚举<strong>定向后的图上</strong>v的一个邻点w，如果rank[w] &gt; rank[u]，则res += cnt[w]，cnt[w]++<br>4、在枚举完v和w后将cnt清空。<br>我们画一画最后定向出来的图本质不同的就这三种，我们惊奇的发现运用这个算法这三种图都只会被计算一次。<br><img src="/images/6.png" alt=""><br>这才是真正的杂技戏耍啊。</p><h3 id="最终boss"><a href="#最终boss" class="headerlink" title="最终boss"></a>最终boss</h3><p>来个最后的boss题吧，基本就能解决三元环/四元环计数问题了，也非常能阐释出这类问题的一个解决的思想。<br><a href="https://codeforces.com/gym/102028/problem/L" target="_blank" rel="noopener">2018-2019 ACM-ICPC, Asia Jiaozuo Regional Contest-L(Connected Subgraphs)</a><br>题目问给你一张无向图，任取4条边，是连通子图的数目有多少？<br>画一画，发现就5种不同的情况<br><img src="/images/7.png" alt=""><br>情况1，2比较复杂，我们等会儿来说，先看情况3，非常好算，直接枚举点3，然后组合数一下就没了。</p><p>再来看情况四，也好算，枚举点2，然后该点三元环数目 *    （度数 - 1）就完了，三元环板子拿来改改就行了</p><p>再来看情况五，好算，四元环板子拿来就没了</p><p>只剩情况1和2了，我们来看情况1，这种肯定枚举对称中心的点，考虑枚举它的邻点，用一个sum来记录已经枚举过的邻点的(度数 - 1)的和，每次用枚举的(邻点度数 - 1) * sum，再把sum += 邻点度数 - 1，就可以得到情况1的答案，但发现有重复的点导致并不是真正的情况1，我们来看一下，首先点2，4一定是不相同的，枚举发现有如下三种情况：<br>1、1和4相同，2和5不相同：发现是第4种情况，而且会多枚举2次，所以减去2 * 情况4<br>2、1和5相同：发现是四元环，且会被多枚举4次，所以减去4 * 情况5<br>3、 1和4相同，2和5相同：发现是三元环，且会被多枚举到3次，减去3 * 三元环数目<br>这样情况1就计算完了。</p><p>考虑情况2，枚举2，4之间的这条边，这样我们在2中任意选两个点，4中任意选一个点，组合数算一下就行了，但有重复，考虑1，5或者1，3相同，最后都是情况4，会被重复枚举2次，所以减去2 * 情况4</p><p>最后加起来就是最终的答案了。<br><strong>这个题也告诉我们，对于这种环的计数问题，先找好算的枚举方法（尽量找图形对称点或者边进行枚举），然后找重复计算的减掉。</strong></p><div><div class="fold_hider"><div class="close hider_title">代码</div></div><div class="fold"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;ll&gt; vl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;pii&gt; vp;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> db eps = <span class="number">1e-10</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ep emplace</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> copy(a, b) memcpy(a, b, sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PA cout &lt;&lt; <span class="meta-string">"pass\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x &amp; -x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) x.begin(), x.end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TM cout &lt;&lt; db(clock()) / CLOCKS_PER_SEC &lt;&lt; <span class="meta-string">'\n'</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">233</span>;</span><br><span class="line">vi G[maxn], g[maxn];</span><br><span class="line"><span class="keyword">int</span> T, n, m;</span><br><span class="line"><span class="keyword">int</span> u[maxn], v[maxn], rk[maxn], vis[maxn], deg[maxn], cnt[maxn];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> ord[maxn], num[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> res;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        vis[i] = rk[i] = <span class="number">0</span>;</span><br><span class="line">        g[i].clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) G[i].clear(), deg[i] = num[i] = <span class="number">0</span>;</span><br><span class="line">    res = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    x += y;</span><br><span class="line">    <span class="keyword">if</span>(x &gt;= mod) x -= mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    x -= y;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>) x += mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">three</span><span class="params">()</span></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(deg[u[i]] &gt; deg[v[i]] || (deg[u[i]] == deg[v[i]] &amp;&amp; u[i] &gt; v[i])) g[v[i]].eb(u[i]);</span><br><span class="line">        <span class="keyword">else</span> g[u[i]].eb(v[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;x : g[u[i]]) vis[x] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;x : g[v[i]])&#123;</span><br><span class="line">            <span class="keyword">if</span>(vis[x] == i) &#123;</span><br><span class="line">                add(num[u[i]], <span class="number">1</span>);</span><br><span class="line">                add(num[v[i]], <span class="number">1</span>);</span><br><span class="line">                add(num[x], <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> deg[x] &lt; deg[y] || (deg[x] == deg[y] &amp;&amp; x &lt; y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">four</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ord[i] = i;</span><br><span class="line">    sort(ord + <span class="number">1</span>, ord + n + <span class="number">1</span>, cmp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) rk[ord[i]] = i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(rk[u[i]] &lt; rk[v[i]]) g[u[i]].eb(v[i]);</span><br><span class="line">        <span class="keyword">else</span> g[v[i]].eb(u[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;x : G[i])&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;y : g[x])&#123;</span><br><span class="line">                <span class="keyword">if</span>(rk[y] &gt; rk[i]) add(tmp, cnt[y]), add(cnt[y], <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;x : G[i])&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;y : g[x])&#123;</span><br><span class="line">                <span class="keyword">if</span>(rk[y] &gt; rk[i]) cnt[y] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pow_mod</span><span class="params">(<span class="keyword">int</span> q, <span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(w)&#123;</span><br><span class="line">        <span class="keyword">if</span>(w &amp; <span class="number">1</span>) ret = <span class="number">1l</span>l * ret * q % mod;</span><br><span class="line">        q = <span class="number">1l</span>l * q * q % mod;</span><br><span class="line">        w &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    three();</span><br><span class="line">    <span class="keyword">int</span> t4 = four();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        add(res, <span class="number">1l</span>l * deg[i] * (deg[i] - <span class="number">1</span>) % mod * (deg[i] - <span class="number">2</span>) % mod * (deg[i] - <span class="number">3</span>) % mod * pow_mod(<span class="number">24</span>, mod - <span class="number">2</span>) % mod);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">        add(res, <span class="number">1l</span>l * (deg[u[i]] - <span class="number">1</span>) * (deg[u[i]] - <span class="number">2</span>) / <span class="number">2</span> % mod * (deg[v[i]] - <span class="number">1</span>) % mod);</span><br><span class="line">        add(res, <span class="number">1l</span>l * (deg[v[i]] - <span class="number">1</span>) * (deg[v[i]] - <span class="number">2</span>) / <span class="number">2</span> % mod * (deg[u[i]] - <span class="number">1</span>) % mod);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> t3 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        add(t3, <span class="number">1l</span>l * (deg[i] - <span class="number">2</span>) * num[i] % mod);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;x : G[i])&#123;</span><br><span class="line">            add(sum, <span class="number">1l</span>l * tmp * (deg[x] - <span class="number">1</span>) % mod);</span><br><span class="line">            add(tmp, deg[x] - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    add(res, sum);</span><br><span class="line">    sub(res, <span class="number">3l</span>l * t4 % mod);</span><br><span class="line">    sub(res, <span class="number">3l</span>l * t3 % mod);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) sub(res, num[i]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>), <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        clear();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; u[i] &gt;&gt; v[i];</span><br><span class="line">            deg[u[i]]++;</span><br><span class="line">            deg[v[i]]++;</span><br><span class="line">            G[u[i]].eb(v[i]);</span><br><span class="line">            G[v[i]].eb(u[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        solve();</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概论&quot;&gt;&lt;a href=&quot;#概论&quot; class=&quot;headerlink&quot; title=&quot;概论&quot;&gt;&lt;/a&gt;概论&lt;/h3&gt;&lt;p&gt;三元环/四元环问题计数其实很简单，写一写主要是怕自己忘了，但这玩意确实一看就懂。&lt;/p&gt;
&lt;h3 id=&quot;三元环计数&quot;&gt;&lt;a href=&quot;#三元环计数&quot; class=&quot;headerlink&quot; title=&quot;三元环计数&quot;&gt;&lt;/a&gt;三元环计数&lt;/h3&gt;&lt;h4 id=&quot;无向图&quot;&gt;&lt;a href=&quot;#无向图&quot; class=&quot;headerlink&quot; title=&quot;无向图&quot;&gt;&lt;/a&gt;无向图&lt;/h4&gt;&lt;p&gt;最朴素的暴力枚举，考虑枚举三个点，看之间是否有边，复杂度&lt;script type=&quot;math/tex&quot;&gt;O(n^3)&lt;/script&gt;，或者枚举一条边，再枚举一个点，复杂度&lt;script type=&quot;math/tex&quot;&gt;O(mn)&lt;/script&gt;，如果是稀疏图，n，m同阶的情况下我们对这个复杂度不是很满意。&lt;/p&gt;
&lt;p&gt;一个比较简单的做法就是给边定向，我们考虑让所有边从小度数的指向大度数的，按照如下步骤找三元环：&lt;br&gt;1、枚举一条边&lt;br&gt;2、将边的其中一个点连接的其他点全部打上标记&lt;br&gt;3、枚举这条边的另一个的邻点，如果打上了标记就计数&lt;/p&gt;
&lt;p&gt;来分析一下复杂度，这里就要用图中经常用到的一个分大小点的方法来分析，我们将度数大于&lt;script type=&quot;math/tex&quot;&gt;\sqrt(m)&lt;/script&gt;的称为大点，其它点称为小点，很显然的是大点个数是&lt;script type=&quot;math/tex&quot;&gt;O(sqrt(m))&lt;/script&gt;级别的，小点个数是&lt;script type=&quot;math/tex&quot;&gt;O(n)&lt;/script&gt;级别的（这里我们认为n，m同阶）。考虑大点被枚举的次数，大点因为是被小点指向的，所以被枚举的次数是&lt;script type=&quot;math/tex&quot;&gt;O(m)&lt;/script&gt;级别的，所有大点被枚举次数是&lt;script type=&quot;math/tex&quot;&gt;O(m\sqrt(m))&lt;/script&gt;级别的。再来考虑小点，小点因为原图上度数小于&lt;script type=&quot;math/tex&quot;&gt;O(\sqrt(m))&lt;/script&gt;，所以定向后能指向它的点也最多是&lt;script type=&quot;math/tex&quot;&gt;O(\sqrt(m))&lt;/script&gt;级别的，总的复杂度也是&lt;script type=&quot;math/tex&quot;&gt;O(m\sqrt(m))&lt;/script&gt;级别的。&lt;/p&gt;
    
    </summary>
    
      <category term="三元环/四元环" scheme="http://yoursite.com/categories/%E4%B8%89%E5%85%83%E7%8E%AF-%E5%9B%9B%E5%85%83%E7%8E%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>树套树杂技</title>
    <link href="http://yoursite.com/2020/01/28/%E6%A0%91%E5%A5%97%E6%A0%91%E6%9D%82%E6%8A%80/"/>
    <id>http://yoursite.com/2020/01/28/树套树杂技/</id>
    <published>2020-01-28T05:54:25.000Z</published>
    <updated>2020-01-28T06:31:01.574Z</updated>
    
    <content type="html"><![CDATA[<h3 id="树套树概念"><a href="#树套树概念" class="headerlink" title="树套树概念"></a>树套树概念</h3><p>一直觉得树套树是非常高深的oi玩的数据结构，<del>我一个非oi选手不配玩这个。</del> 最近沉迷数据结构（<del>王伟</del>），当然免不了树套树啦。</p><p>感觉很多情况下一个题可以用树套树 或者 整体二分/cdq分治同时做，区别就是在线离线了。一般来说，离线的整体二分和cdq分治时间复杂度更优，常数更小，但是对于有些在线题目以及某些题目树套树码量会非常小，但有些树套树码量又会非常大，所以多掌握几种方法，根据题目来选择做法就会显得更加从容。</p><p>一般来说，树套树中如果有一个是bit，那么码量就不会太大，如果是线段树 + 平衡树/线段树，码量就会比较大，树套树也有很多种，我们只学习最基本常用的几种，有些感觉比较偏了难了就不学了。<br><a id="more"></a></p><h3 id="树套树探究"><a href="#树套树探究" class="headerlink" title="树套树探究"></a>树套树探究</h3><h4 id="线段树-树状数组套平衡树"><a href="#线段树-树状数组套平衡树" class="headerlink" title="线段树/树状数组套平衡树"></a>线段树/树状数组套平衡树</h4><p>这应该是一类最常见的树套树了，入门的树套树也都是这个，主要可以用来维护多维偏序下的一些东西。外层一般用个bit或者线段树，里面用平衡树（我就会treap和pbds）<br>比如<a href="https://www.luogu.com.cn/problem/P3380" target="_blank" rel="noopener">二逼平衡树</a>，用的线段树套treap，码量就会挺大的了，不过它无法很好处理求第k大的问题，只能通过二分后来查看rank来求第k大，这样是3个log的。<br><div><div class="fold_hider"><div class="close hider_title">代码</div></div><div class="fold"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;ll&gt; vl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;pii&gt; vp;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">2147483647</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> db eps = <span class="number">1e-10</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ep emplace</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> copy(a, b) memcpy(a, b, sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PA cout &lt;&lt; <span class="meta-string">"pass\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x &amp; -x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) x.begin(), x.end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TM cout &lt;&lt; db(clock()) / CLOCKS_PER_SEC &lt;&lt; <span class="meta-string">'\n'</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">233</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v, k, cnt, sz;</span><br><span class="line">    <span class="keyword">int</span> ch[<span class="number">2</span>];</span><br><span class="line">&#125;t[maxn * <span class="number">40</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sz;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Treap</span> &#123;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls t[o].ch[0]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs t[o].ch[1]</span></span><br><span class="line">    <span class="keyword">int</span> root;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> o)</span> </span>&#123;</span><br><span class="line">        t[o].sz = t[ls].sz + t[rs].sz + t[o].cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> &amp;o, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> son = t[o].ch[d];</span><br><span class="line">        t[o].ch[d] = t[son].ch[d ^ <span class="number">1</span>];</span><br><span class="line">        t[son].ch[d ^ <span class="number">1</span>] = o;</span><br><span class="line">        update(o);</span><br><span class="line">        update(o = son);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> &amp;o, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!o) &#123;</span><br><span class="line">            o = ++sz;</span><br><span class="line">            t[o].cnt = t[o].sz = <span class="number">1</span>;</span><br><span class="line">            t[o].k = rand();</span><br><span class="line">            t[o].v = v;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        t[o].sz++;</span><br><span class="line">        <span class="keyword">if</span> (t[o].v == v) &#123;t[o].cnt++; <span class="keyword">return</span>;&#125;</span><br><span class="line">        <span class="keyword">int</span> d = v &gt; t[o].v;</span><br><span class="line">        insert(t[o].ch[d], v);</span><br><span class="line">        <span class="keyword">if</span> (t[o].k &gt; t[t[o].ch[d]].k) rotate(o, d);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> &amp;o, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!o) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (t[o].v == v) &#123;</span><br><span class="line">            <span class="keyword">if</span> (t[o].cnt &gt; <span class="number">1</span>) &#123; t[o].cnt--, t[o].sz--; <span class="keyword">return</span>; &#125;</span><br><span class="line">            <span class="keyword">bool</span> d = t[ls].k &gt; t[rs].k;</span><br><span class="line">            <span class="keyword">if</span> (!ls || !rs) o = ls + rs;</span><br><span class="line">            <span class="keyword">else</span> rotate(o, d), del(o, v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> t[o].sz--, del(t[o].ch[t[o].v &lt; v], v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rank</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!o) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (t[o].v == v) <span class="keyword">return</span> t[ls].sz;</span><br><span class="line">        <span class="keyword">if</span> (t[o].v &gt; v) <span class="keyword">return</span> rank(ls, v);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> t[ls].sz + t[o].cnt + rank(rs, v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">kth</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (k &lt;= t[ls].sz) o = ls;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (k &gt; t[ls].sz + t[o].cnt) k -= t[ls].sz + t[o].cnt, o = rs;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> t[o].v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pre</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!o) <span class="keyword">return</span> -inf;</span><br><span class="line">        <span class="keyword">if</span> (t[o].v &gt;= v) <span class="keyword">return</span> pre(ls, v);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> max(t[o].v, pre(rs, v));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">nxt</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!o) <span class="keyword">return</span> inf;</span><br><span class="line">        <span class="keyword">if</span> (t[o].v &lt;= v) <span class="keyword">return</span> nxt(rs, v);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> min(t[o].v, nxt(ls, v));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> ls</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> rs</span></span><br><span class="line">&#125;a[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> b[maxn], n, m;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Segment_Tree</span>&#123;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls o &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs o &lt;&lt; 1 | 1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = l; i &lt;= r; i++) a[o].insert(a[o].root, b[i]);</span><br><span class="line">        <span class="keyword">if</span>(l == r) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        build(ls, l, mid);</span><br><span class="line">        build(rs, mid + <span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rank</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> tl, <span class="keyword">int</span> tr, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l &gt; tr || tl &gt; r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(l &lt;= tl &amp;&amp; tr &lt;= r) <span class="keyword">return</span> a[o].rank(a[o].root, v);</span><br><span class="line">        <span class="keyword">int</span> mid = tl + tr &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> rank(ls, tl, mid, l, r, v) + rank(rs, mid + <span class="number">1</span>, tr, l, r, v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">kth</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ub = <span class="number">1e8</span>, lb = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(ub &gt;= lb)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = ub + lb &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(rank(<span class="number">1</span>, <span class="number">1</span>, n, l, r, mid) + <span class="number">1</span> &lt;= k) lb = mid + <span class="number">1</span>, ans = mid;</span><br><span class="line">            <span class="keyword">else</span> ub = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> tl, <span class="keyword">int</span> tr, <span class="keyword">int</span> pos, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(tl &gt; pos || pos &gt; tr) <span class="keyword">return</span>;</span><br><span class="line">        a[o].del(a[o].root, b[pos]);</span><br><span class="line">        a[o].insert(a[o].root, v);</span><br><span class="line">        <span class="keyword">if</span>(tl == tr) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = tl + tr &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        update(ls, tl, mid, pos, v);</span><br><span class="line">        update(rs, mid + <span class="number">1</span>, tr, pos, v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pre</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> tl, <span class="keyword">int</span> tr, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(tl &gt; r || l &gt; tr) <span class="keyword">return</span> -inf;</span><br><span class="line">        <span class="keyword">if</span>(l &lt;= tl &amp;&amp; tr &lt;= r) <span class="keyword">return</span> a[o].pre(a[o].root, v);</span><br><span class="line">        <span class="keyword">int</span> mid = tl + tr &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> max(pre(ls, tl, mid, l, r, v), pre(rs, mid + <span class="number">1</span>, tr, l, r, v));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">nxt</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> tl, <span class="keyword">int</span> tr, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(tl &gt; r || l &gt; tr) <span class="keyword">return</span> inf;</span><br><span class="line">        <span class="keyword">if</span>(l &lt;= tl &amp;&amp; tr &lt;= r) <span class="keyword">return</span> a[o].nxt(a[o].root, v);</span><br><span class="line">        <span class="keyword">int</span> mid = tl + tr &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> min(nxt(ls, tl, mid, l, r, v), nxt(rs, mid + <span class="number">1</span>, tr, l, r, v));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> ls</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> rs</span></span><br><span class="line">&#125;tr;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    srand(time(<span class="number">0</span>));</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>), <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">cin</span> &gt;&gt; b[i];</span><br><span class="line">    tr.build(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> op, l, r, k;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; op &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        <span class="keyword">if</span>(op != <span class="number">3</span>) <span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">1</span>) <span class="built_in">cout</span> &lt;&lt; tr.rank(<span class="number">1</span>, <span class="number">1</span>, n, l, r, k) + <span class="number">1</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">2</span>) <span class="built_in">cout</span> &lt;&lt; tr.kth(l, r, k) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">3</span>) tr.update(<span class="number">1</span>, <span class="number">1</span>, n, l, r), b[l] = r;</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">4</span>) <span class="built_in">cout</span> &lt;&lt; tr.pre(<span class="number">1</span>, <span class="number">1</span>, n, l, r, k) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">5</span>) <span class="built_in">cout</span> &lt;&lt; tr.nxt(<span class="number">1</span>, <span class="number">1</span>, n, l, r, k) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></p><p>对于这个<a href="https://www.luogu.com.cn/problem/P3157" target="_blank" rel="noopener">动态逆序对</a>也是，这里为了方便写的bit套pbds，代码量就非常短，比cdq还短很多，就不太容易出错<br><div><div class="fold_hider"><div class="close hider_title">代码</div></div><div class="fold"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/extc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;ll&gt; vl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;pii&gt; vp;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> db eps = <span class="number">1e-10</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ep emplace</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> copy(a, b) memcpy(a, b, sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PA cout &lt;&lt; <span class="meta-string">"pass\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x &amp; -x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) x.begin(), x.end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TM cout &lt;&lt; db(clock()) / CLOCKS_PER_SEC &lt;&lt; <span class="meta-string">'\n'</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">233</span>;</span><br><span class="line">tree&lt;pii, null_type, less&lt;pii&gt;, rb_tree_tag, tree_order_statistics_node_update&gt; t[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pos[maxn];</span><br><span class="line"><span class="keyword">int</span> b[maxn];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x &lt;= n)&#123;</span><br><span class="line">        t[x].insert(pii(b[p], p));</span><br><span class="line">        x += lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x &lt;= n)&#123;</span><br><span class="line">        t[x].erase(pii(b[p], p));</span><br><span class="line">        x += lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">        ret += t[x].order_of_key(pii(p, -inf));</span><br><span class="line">        x -= lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    srand(time(<span class="number">0</span>));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;b[i]);</span><br><span class="line">        pos[b[i]] = i;</span><br><span class="line">        res += i - <span class="number">1</span> - query(n, b[i]);</span><br><span class="line">        add(i, i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, res);</span><br><span class="line">        del(pos[x], pos[x]);</span><br><span class="line">        res -= query(n, x) - query(pos[x] - <span class="number">1</span>, x) + query(pos[x], inf) - query(pos[x], x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></p><p>总的来说，这类树套树基本是万能的，一般是能维护二维平面上的各种情况（包括取max，取min，可以用平衡树实现动态插入和删除），比较万能通用。一般来说，如果外层的区间能转换为两个前缀的逆运算的话，推荐用bit而不是线段树，毕竟复杂度和码量都占了很大的优势。</p><h4 id="树状数组套主席树"><a href="#树状数组套主席树" class="headerlink" title="树状数组套主席树"></a>树状数组套主席树</h4><p>这一类也非常常见，为了实现主席树的单点修改，就需要用这一类操作，但它所能干的事情也就是主席树能干的事情。主席树是基于前缀逆运算的原理，所以形如取max这种没有逆运算的东西就没法维护了。<br>题目的话去看看今年icpc徐州的H题以及南京的F题吧，都是同一个东西。</p><h4 id="树状数组套线段树"><a href="#树状数组套线段树" class="headerlink" title="树状数组套线段树"></a>树状数组套线段树</h4><p>一般来说线段树放在内层，就需要动态开点了，其实感觉跟主席树基本就是一个东西了，这里给个题目吧(这个题关于cdq解法我也会写，栽cdq的专栏里面，树套树就显得比较无脑了)。<br><a href="https://www.luogu.com.cn/problem/P4093" target="_blank" rel="noopener">序列</a><br>这个题目有个显著特点就是维护的都是前缀的东西，所以这里bit就可以拿来维护前缀的最值了。<br><div><div class="fold_hider"><div class="close hider_title">代码</div></div><div class="fold"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;ll&gt; vl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;pii&gt; vp;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> db eps = <span class="number">1e-10</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ep emplace</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> copy(a, b) memcpy(a, b, sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PA cout &lt;&lt; <span class="meta-string">"pass\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x &amp; -x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) x.begin(), x.end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TM cout &lt;&lt; db(clock()) / CLOCKS_PER_SEC &lt;&lt; <span class="meta-string">'\n'</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">4e5</span> + <span class="number">233</span>;</span><br><span class="line"><span class="keyword">int</span> root[maxn * <span class="number">40</span>], mx[maxn * <span class="number">40</span>], ls[maxn * <span class="number">40</span>], rs[maxn * <span class="number">40</span>];</span><br><span class="line"><span class="keyword">int</span> idx, n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> &amp;o, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> pos, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!o) o = ++idx;</span><br><span class="line">    mx[o] = max(mx[o], v);</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(pos &lt;= mid) update(ls[o], l, mid, pos, v);</span><br><span class="line">    <span class="keyword">else</span> update(rs[o], mid + <span class="number">1</span>, r, pos, v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span> mx[o];</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(pos &lt;= mid) <span class="keyword">return</span> query(ls[o], l, mid, pos);</span><br><span class="line">    <span class="keyword">else</span>  <span class="keyword">return</span> max(mx[ls[o]], query(rs[o], mid + <span class="number">1</span>, r, pos));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> d, <span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x &lt;= N)&#123;</span><br><span class="line">        update(root[x], <span class="number">1</span>, N, pos, d);</span><br><span class="line">        x += lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">        ret = max(ret, query(root[x], <span class="number">1</span>, N, pos));</span><br><span class="line">        x -= lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn], b[maxn], c[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>), <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">cin</span> &gt;&gt; a[i], b[i] = c[i] = a[i], N = max(N, a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> x, y;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        b[x] = min(b[x], y);</span><br><span class="line">        c[x] = max(c[x], y);</span><br><span class="line">        N = max(N, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = query(a[i], b[i]) + <span class="number">1</span>;</span><br><span class="line">        res = max(res, tmp);</span><br><span class="line">        add(c[i], tmp, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></p><p>常规操作就这样了，有什么花的东西以后再来补。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;树套树概念&quot;&gt;&lt;a href=&quot;#树套树概念&quot; class=&quot;headerlink&quot; title=&quot;树套树概念&quot;&gt;&lt;/a&gt;树套树概念&lt;/h3&gt;&lt;p&gt;一直觉得树套树是非常高深的oi玩的数据结构，&lt;del&gt;我一个非oi选手不配玩这个。&lt;/del&gt; 最近沉迷数据结构（&lt;del&gt;王伟&lt;/del&gt;），当然免不了树套树啦。&lt;/p&gt;
&lt;p&gt;感觉很多情况下一个题可以用树套树 或者 整体二分/cdq分治同时做，区别就是在线离线了。一般来说，离线的整体二分和cdq分治时间复杂度更优，常数更小，但是对于有些在线题目以及某些题目树套树码量会非常小，但有些树套树码量又会非常大，所以多掌握几种方法，根据题目来选择做法就会显得更加从容。&lt;/p&gt;
&lt;p&gt;一般来说，树套树中如果有一个是bit，那么码量就不会太大，如果是线段树 + 平衡树/线段树，码量就会比较大，树套树也有很多种，我们只学习最基本常用的几种，有些感觉比较偏了难了就不学了。&lt;br&gt;
    
    </summary>
    
      <category term="树套树" scheme="http://yoursite.com/categories/%E6%A0%91%E5%A5%97%E6%A0%91/"/>
    
    
  </entry>
  
  <entry>
    <title>cdq分治浅谈</title>
    <link href="http://yoursite.com/2020/01/26/cdq%E5%88%86%E6%B2%BB%E6%B5%85%E8%B0%88/"/>
    <id>http://yoursite.com/2020/01/26/cdq分治浅谈/</id>
    <published>2020-01-26T14:47:31.000Z</published>
    <updated>2020-01-28T06:43:41.793Z</updated>
    
    <content type="html"><![CDATA[<p>cdq的东西和整体二分有点类似，就一起学了，学了后发现原理还是挺简单的，就是可能需要多了解一些应用和套路</p><h3 id="cdq分治概述"><a href="#cdq分治概述" class="headerlink" title="cdq分治概述"></a>cdq分治概述</h3><p>cdq分治利用分治过程中统计左半部分对右半部分的贡献，从而可以解决一些特殊的问题。主要解决的就是多维偏序的问题。</p><a id="more"></a><h3 id="cdq分治详解"><a href="#cdq分治详解" class="headerlink" title="cdq分治详解"></a>cdq分治详解</h3><h4 id="二维偏序"><a href="#二维偏序" class="headerlink" title="二维偏序"></a>二维偏序</h4><p>二维偏序其实并不用cdq分治，只用一维排序然后bit维护一下即可。二维数点其实本质也是拆成了四个二维偏序来统计的，静态的二维排序是非常简单的，但是可能会有动态的二维偏序问题，这里先提一下，后面三维偏序的时候再说。</p><h4 id="三维偏序"><a href="#三维偏序" class="headerlink" title="三维偏序"></a>三维偏序</h4><p>三维偏序是教科书般的cdq分治解决的问题。考虑对于其中任意一维排好序，对第二纬采取类似归并排序的方法，先处理各自两边的贡献，然后两边都已经分别排好序了，我们将它们按照第二维的顺序合并起来。（这里合并过程中第一维可能就不满足顺序关系了，但是不影响，因为这样一定保证如果满足偏序关系的元素之间归并后一定还满足偏序关系，原因是右边的第一维一定比左边的大，而归并过程中保证了第二维满足偏序关系，所以归并前若满足偏序关系，归并后一定还满足）。如果在左边，我们将它的第三纬加入bit中，如果在右边，我们算左半边对该点的贡献（bit中的某个前缀和），这样边归并边统计答案，非常类似于利用归并排序统计逆序对个数的过程。</p><p>这里有个三维偏序的裸题，具体代码见里面：<a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3262" target="_blank" rel="noopener">陌上花开</a><br><div><div class="fold_hider"><div class="close hider_title">代码</div></div><div class="fold"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;ll&gt; vl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;pii&gt; vp;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> db eps = <span class="number">1e-10</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ep emplace</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> copy(a, b) memcpy(a, b, sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PA cout &lt;&lt; <span class="meta-string">"pass\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x &amp; -x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) x.begin(), x.end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TM cout &lt;&lt; db(clock()) / CLOCKS_PER_SEC &lt;&lt; <span class="meta-string">'\n'</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">233</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y, z, w, s;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> node &amp;r) <span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &lt; r.x || (x == r.x &amp;&amp; y &lt; r.y) || (x == r.x &amp;&amp; y == r.y &amp;&amp; z &lt; r.z);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> != (<span class="keyword">const</span> node &amp;r) <span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x != r.x || y != r.y || z != r.z;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;a[maxn], tmp[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="keyword">int</span> c[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x &lt; maxn)&#123;</span><br><span class="line">        c[x] += d;</span><br><span class="line">        x += lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">        ret += c[x];</span><br><span class="line">        x -= lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cdq</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    cdq(l, mid);</span><br><span class="line">    cdq(mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="keyword">int</span> pl = l, pr = mid + <span class="number">1</span>, tot = l;</span><br><span class="line">    <span class="keyword">while</span>(pl &lt;= mid &amp;&amp; pr &lt;= r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[pl].y &lt;= a[pr].y) add(a[pl].z, a[pl].w), tmp[tot++] = a[pl++];</span><br><span class="line">        <span class="keyword">else</span> tmp[tot] = a[pr], tmp[tot++].s += query(a[pr++].z);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(pl &lt;= mid) add(a[pl].z, a[pl].w), tmp[tot++] = a[pl++];</span><br><span class="line">    <span class="keyword">while</span>(pr &lt;= r) tmp[tot] = a[pr], tmp[tot++].s += query(a[pr++].z);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = l; i &lt;= mid; i++) add(a[i].z, -a[i].w);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = l; i &lt;= r; i++) a[i] = tmp[i];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> res[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>), <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i].x &gt;&gt; a[i].y &gt;&gt; a[i].z;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    a[<span class="number">0</span>].x = -inf;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i] != a[i - <span class="number">1</span>]) a[++len] = a[i];</span><br><span class="line">        a[len].w++;</span><br><span class="line">    &#125;</span><br><span class="line">    cdq(<span class="number">1</span>, len);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; i++)&#123;</span><br><span class="line">        res[a[i].s + a[i].w - <span class="number">1</span>] += a[i].w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; res[i] &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></p><h4 id="更高维的偏序"><a href="#更高维的偏序" class="headerlink" title="更高维的偏序"></a>更高维的偏序</h4><p>更高维的偏序如果采用cdq的方法，就需要嵌套了，每高一层就需要嵌套一层，复杂度就会多一个log，这里就不多讲了没什么实际的意义，但有个四维偏序的题目cdq套cdq之后可以补一下。</p><p>还有一种方法是利用bitset来解决高维偏序，题目:<a href="http://hihocoder.com/problemset/problem/1236" target="_blank" rel="noopener">Scores</a></p><p>假设是k纬的，复杂度是<script type="math/tex">O(\frac{kn^2}{w})</script><br>我们需要用bitset维护每一纬前i小的并集是多少，这空间是<script type="math/tex">O(n^2)</script>的，基本就mle或者tle了，这里还得用一下分块。考虑每一纬维护<script type="math/tex">sqrt(n)</script>个块，假设是第k个块，表示前k个块的总的并集是某个集合。这样我们查询的时候直接二分到某个点，根据它在哪个块，然后剩下元素暴力更新即可，即可通过这个题。<br><div><div class="fold_hider"><div class="close hider_title">代码</div></div><div class="fold"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;ll&gt; vl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;pii&gt; vp;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> db eps = <span class="number">1e-10</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ep emplace</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> copy(a, b) memcpy(a, b, sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PA cout &lt;&lt; <span class="meta-string">"pass\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x &amp; -x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) x.begin(), x.end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TM cout &lt;&lt; db(clock()) / CLOCKS_PER_SEC &lt;&lt; <span class="meta-string">'\n'</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> sz = <span class="number">230</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">50010</span>;</span><br><span class="line"><span class="built_in">bitset</span>&lt;maxn&gt; mp[<span class="number">5</span>][sz + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> T, n, m, q;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">5</span>][maxn];</span><br><span class="line"><span class="keyword">int</span> b[maxn];</span><br><span class="line"><span class="keyword">int</span> ord[<span class="number">5</span>][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b[x] &lt; b[y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">bitset</span>&lt;maxn&gt; all;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>, w = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">'-'</span>)w = <span class="number">-1</span>;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) s = s * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = getchar();</span><br><span class="line">    <span class="keyword">return</span> s * w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    T = read();</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= sz; j++)&#123;</span><br><span class="line">                mp[i][j].reset();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)&#123;</span><br><span class="line">                a[j][i] = read();</span><br><span class="line">                ord[j][i] = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) b[j] = a[i][j];</span><br><span class="line">            sort(ord[i] + <span class="number">1</span>, ord[i] + n + <span class="number">1</span>, cmp);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= sz; j++)&#123;</span><br><span class="line">                mp[i][j] |= mp[i][j - <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= sz &amp;&amp; k + (j - <span class="number">1</span>) * sz &lt;= n; k++)&#123;</span><br><span class="line">                    <span class="keyword">int</span> now = ord[i][(j - <span class="number">1</span>) * sz + k];</span><br><span class="line">                    mp[i][j][now] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        all.reset();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) all[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">        <span class="keyword">int</span> last = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">            <span class="keyword">int</span> t[<span class="number">5</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) t[i] = read(), t[i] ^= last;</span><br><span class="line">            <span class="built_in">bitset</span>&lt;maxn&gt; res = all;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> lb = <span class="number">1</span>, ub = n, ans = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span>(ub &gt;= lb)&#123;</span><br><span class="line">                    <span class="keyword">int</span> mid = ub + lb &gt;&gt; <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span>(a[i][ord[i][mid]] &lt;= t[i]) lb = mid + <span class="number">1</span>, ans = mid;</span><br><span class="line">                    <span class="keyword">else</span> ub = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(!ans) &#123;</span><br><span class="line">                    res.reset();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> block = ans / sz;</span><br><span class="line">                <span class="keyword">int</span> le = ans % sz;</span><br><span class="line">                <span class="built_in">bitset</span>&lt;maxn&gt; tmp = mp[i][block];</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= le; j++)&#123;</span><br><span class="line">                    <span class="keyword">int</span> now = ord[i][block * sz + j];</span><br><span class="line">                    tmp[now] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                res &amp;= tmp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, last = res.count());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></p><h4 id="广义多维偏序"><a href="#广义多维偏序" class="headerlink" title="广义多维偏序"></a>广义多维偏序</h4><p>这里还是主要讲三维偏序。其实很多时候我们并不是要统计三维偏序的数目是多少，更广义的情况是，我们可以将某个问题转换为，当前点的答案只跟它在某维偏序下比它小的操作有关。可能这句话听着有点绕，我们拿最简单的，也是前面提到的二维数点问题来解释。</p><p>假设二维数点现在可以带修改了（事实上就是一个三维偏序问题了，因为时间也算做一个维度了），我们根据差分可以知道，一个矩形可以拆成四个二维空间上前缀的加减，每一个前缀都只和它在二维偏序下严格小于它的操作有关（这里我们需要把每个点看成插入进去，修改的话看成删除后再插入一个新值），所以只要问题模型能够转换为最终答案只跟多维偏序下的操作有关，我们就可以用cdq分治来解决这个问题。</p><p>再回到带修改的二维数点问题上，我们将操作顺序排好，默认时间t已经排好了序，然后用cdq解决剩下两维的偏序问题，如果修改就是将它之前的值删除，再重新插入一个新值，这样带修改二维数点就很简单解决了。</p><h4 id="优化dp的转移"><a href="#优化dp的转移" class="headerlink" title="优化dp的转移"></a>优化dp的转移</h4><p>如果dp的过程中是在某维偏序下有关（比如三维偏序下的和，以及取最值之类的操作），那么就可以用cdq分治来优化转移，但是跟普通的cdq分治顺序有所不一样，我们来分析一下。</p><p>我们希望把一个点作为已经算好的点拿去更新其他点的前提是，它已经是最终答案了，不会再有其他还没有结束的点再来更新它了，在偏序下的意思就是偏序比它小的都已经更新完了。我们考虑原来的cdq分治，我们是先处理两边再归并上来处理，归并的时候再考虑左边对右边的贡献。但考虑左边既然对右边有贡献，先处理右边的话明显不对，右边的某些点会拿去更新其它点，但明显它们自己还没有更新完。所以我们考虑调整顺序：<br>1、处理左边<br>2、将右边按第二维排序<br>3、处理左边对右边的贡献<br>4、<strong>将右边按第一维进行排序</strong><br>5、处理右边<br>6、归并<br>第四步一定不要忘了，第一次写这个就是忘了第四步，因为你第二步已经打乱了第一维的顺序，直接处理右边第一维不是默认有序的。<br>例如这个题目：<a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4553" target="_blank" rel="noopener">bzoj-4553(序列)</a><br>分析一下dp就可以发现可以转换成二维平面上的一个前缀的max问题（因为还有时间这一维，所以就是三维偏序），就可以用cdq分治来优化dp的转移了。<br><div><div class="fold_hider"><div class="close hider_title">代码</div></div><div class="fold"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;ll&gt; vl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;pii&gt; vp;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> db eps = <span class="number">1e-10</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ep emplace</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> copy(a, b) memcpy(a, b, sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PA cout &lt;&lt; <span class="meta-string">"pass\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x &amp; -x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) x.begin(), x.end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TM cout &lt;&lt; db(clock()) / CLOCKS_PER_SEC &lt;&lt; <span class="meta-string">'\n'</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">233</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> op, x, y, t, id;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> node &amp;r) <span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &lt; r.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;a[maxn * <span class="number">10</span>], tmp[maxn * <span class="number">10</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a, node b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.t &lt; b.t;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> f[maxn], n, m;</span><br><span class="line"><span class="keyword">int</span> c[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x &lt; maxn)&#123;</span><br><span class="line">        c[x] = max(c[x], d);</span><br><span class="line">        x += lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x &lt; maxn)&#123;</span><br><span class="line">        c[x] = <span class="number">0</span>;</span><br><span class="line">        x += lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">        ret = max(ret, c[x]);</span><br><span class="line">        x -= lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cdq</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    cdq(l, mid);</span><br><span class="line">    sort(a + mid + <span class="number">1</span>, a + r + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> pl = l, pr = mid + <span class="number">1</span>, tot = l;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span>(pl &lt;= mid &amp;&amp; pr &lt;= r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[pl].x &lt;= a[pr].x) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!a[pl].op) add(a[pl].y, f[a[pl].id]);</span><br><span class="line">            tmp[tot++] = a[pl++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[pr].op) f[a[pr].id] = max(f[a[pr].id], query(a[pr].y) + <span class="number">1</span>);</span><br><span class="line">            tmp[tot++] = a[pr++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(pl &lt;= mid)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!a[pl].op) add(a[pl].y, f[a[pl].id]);</span><br><span class="line">        tmp[tot++] = a[pl++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(pr &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[pr].op) f[a[pr].id] = max(f[a[pr].id], query(a[pr].y) + <span class="number">1</span>);</span><br><span class="line">        tmp[tot++] = a[pr++];</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = l; i &lt;= mid; i++) <span class="keyword">if</span>(!a[i].op) del(a[i].y);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    sort(a + mid + <span class="number">1</span>, a + r + <span class="number">1</span>, cmp);</span><br><span class="line">    cdq(mid + <span class="number">1</span>, r);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    pl = l, pr = mid + <span class="number">1</span>, tot = l;</span><br><span class="line">    <span class="keyword">while</span>(pl &lt;= mid &amp;&amp; pr &lt;= r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[pl].x &lt;= a[pr].x) tmp[tot++] = a[pl++];</span><br><span class="line">        <span class="keyword">else</span> tmp[tot++] = a[pr++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(pl &lt;= mid)tmp[tot++] = a[pl++];</span><br><span class="line">    <span class="keyword">while</span>(pr &lt;= r) tmp[tot++] = a[pr++];</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = l; i &lt;= r; i++) a[i] = tmp[i];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> mx[maxn], mn[maxn];</span><br><span class="line"><span class="keyword">int</span> b[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>), <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        f[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; b[i];</span><br><span class="line">        mn[i] = b[i];</span><br><span class="line">        mx[i] = b[i];</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> x, y;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        mx[x] = max(mx[x], y);</span><br><span class="line">        mn[x] = min(mn[x], y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    a[++cnt] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, ++num, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        a[++cnt] = node&#123;<span class="number">1</span>, mn[i], b[i], ++num, i&#125;;</span><br><span class="line">        a[++cnt] = node&#123;<span class="number">0</span>, b[i], mx[i], ++num, i&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    cdq(<span class="number">1</span>, cnt);</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) res = max(res, f[i]);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></p><h3 id="cdq分治一些题目"><a href="#cdq分治一些题目" class="headerlink" title="cdq分治一些题目"></a>cdq分治一些题目</h3><h4 id="1、陌上花开见上"><a href="#1、陌上花开见上" class="headerlink" title="1、陌上花开见上"></a>1、陌上花开见上</h4><h4 id="2、bzoj-1935-Tree-园丁的烦恼"><a href="#2、bzoj-1935-Tree-园丁的烦恼" class="headerlink" title="2、bzoj-1935(Tree 园丁的烦恼)"></a>2、<a href="https://www.lydsy.com/JudgeOnline/problem.php?id=1935" target="_blank" rel="noopener">bzoj-1935(Tree 园丁的烦恼)</a></h4><p>静态二维数点，可不用cdq，不过学习cdq时候还是用cdq写写练手。<br><div><div class="fold_hider"><div class="close hider_title">代码</div></div><div class="fold"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;ll&gt; vl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;pii&gt; vp;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> db eps = <span class="number">1e-10</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ep emplace</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> copy(a, b) memcpy(a, b, sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PA cout &lt;&lt; <span class="meta-string">"pass\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x &amp; -x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) x.begin(), x.end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TM cout &lt;&lt; db(clock()) / CLOCKS_PER_SEC &lt;&lt; <span class="meta-string">'\n'</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e6</span> + <span class="number">233</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> op, x, y, c, id;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> node &amp;r) <span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x == r.x ? op &lt; r.op : x &lt; r.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;a[maxn], tmp[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> c[maxn * <span class="number">5</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x &lt; maxn * <span class="number">5</span>)&#123;</span><br><span class="line">        c[x] += d;</span><br><span class="line">        x += lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">        ret += c[x];</span><br><span class="line">        x -= lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> res[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cdq</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    cdq(l, mid);</span><br><span class="line">    cdq(mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="keyword">int</span> pl = l, pr = mid + <span class="number">1</span>, tot = l;</span><br><span class="line">    <span class="keyword">while</span>(pl &lt;= mid &amp;&amp; pr &lt;= r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[pl].x &lt;= a[pr].x)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!a[pl].op) add(a[pl].y, a[pl].c);</span><br><span class="line">            tmp[tot++] = a[pl++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[pr].op) res[a[pr].id] += a[pr].c * query(a[pr].y);</span><br><span class="line">            tmp[tot++] = a[pr++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(pl &lt;= mid) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!a[pl].op) add(a[pl].y, a[pl].c);</span><br><span class="line">        tmp[tot++] = a[pl++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(pr &lt;= r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[pr].op) res[a[pr].id] += a[pr].c * query(a[pr].y);</span><br><span class="line">        tmp[tot++] = a[pr++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = l; i &lt;= mid; i++) <span class="keyword">if</span>(!a[i].op) add(a[i].y, -a[i].c);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = l; i &lt;= r; i++) a[i] = tmp[i];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>), <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> x, y;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        x++, y++;</span><br><span class="line">        a[++cnt] = node&#123;<span class="number">0</span>, x, y, <span class="number">1</span>, i&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> x1, y1, x2, y2;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2;</span><br><span class="line">        x1++, y1++, x2++, y2++;</span><br><span class="line">        a[++cnt] = node&#123;<span class="number">1</span>, x1 - <span class="number">1</span>, y1 - <span class="number">1</span>, <span class="number">1</span>, i&#125;;</span><br><span class="line">        a[++cnt] = node&#123;<span class="number">1</span>, x2, y1 - <span class="number">1</span>, <span class="number">-1</span>, i&#125;;</span><br><span class="line">        a[++cnt] = node&#123;<span class="number">1</span>, x1 - <span class="number">1</span>, y2, <span class="number">-1</span>, i&#125;;</span><br><span class="line">        a[++cnt] = node&#123;<span class="number">1</span>, x2, y2, <span class="number">1</span>, i&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    cdq(<span class="number">1</span>, cnt);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) <span class="built_in">cout</span> &lt;&lt; res[i] &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></p><h4 id="3、bzoj-3295-动态逆序对"><a href="#3、bzoj-3295-动态逆序对" class="headerlink" title="3、bzoj-3295(动态逆序对)"></a>3、<a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3295" target="_blank" rel="noopener">bzoj-3295(动态逆序对)</a></h4><p>考虑将时间作为一维，并且默认排好序，我们只用维护二维的带修改的操作，本质跟二维带修改的数点一样，我们只用首先将所有点插入并且过程中动态维护各个点插入时的逆序对贡献到0处，然后对于每一个删除我们都能找到它的贡献，依次放到1-m处，最后求一个前缀和就可以了。抄着板子写写写完发现过不了样例，怀疑人生，怀疑cdq是不是不能解决这个问题。然后冷静思考发现了一个问题，求逆序对的偏序是两部分：当x &lt; nowx，你需要求y &gt; nowy的部分，当x &gt; nowx，你需要求y &lt; nowy的部分，于是懒得改，cdq复制了一遍，正着求一次左上角的偏序反着求一次右下角的偏序就对了，但是代码就很难看，可以合到一起写的代码量瞬间少一大半。<br><div><div class="fold_hider"><div class="close hider_title">代码</div></div><div class="fold"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;ll&gt; vl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;pii&gt; vp;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> db eps = <span class="number">1e-10</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ep emplace</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> copy(a, b) memcpy(a, b, sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PA cout &lt;&lt; <span class="meta-string">"pass\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x &amp; -x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) x.begin(), x.end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TM cout &lt;&lt; db(clock()) / CLOCKS_PER_SEC &lt;&lt; <span class="meta-string">'\n'</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">233</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> c[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x &lt; maxn)&#123;</span><br><span class="line">        c[x] += d;</span><br><span class="line">        x += lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">        ret += c[x];</span><br><span class="line">        x -= lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> op, x, y, c, id;</span><br><span class="line">&#125;a[maxn], tmp[maxn];</span><br><span class="line"> </span><br><span class="line">ll res[maxn];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cdq1</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    cdq1(l, mid);</span><br><span class="line">    cdq1(mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="keyword">int</span> pl = l, pr = mid + <span class="number">1</span>, tot = l;</span><br><span class="line">    <span class="keyword">while</span>(pl &lt;= mid &amp;&amp; pr &lt;= r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[pl].x &gt;= a[pr].x)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!a[pl].op) add(a[pl].y, a[pl].c);</span><br><span class="line">            tmp[tot++] = a[pl++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[pr].op) &#123;</span><br><span class="line">                res[a[pr].id] += a[pr].c * query(a[pr].y - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            tmp[tot++] = a[pr++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(pl &lt;= mid)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!a[pl].op) add(a[pl].y, a[pl].c);</span><br><span class="line">        tmp[tot++] = a[pl++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(pr &lt;= r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[pr].op) &#123;</span><br><span class="line">            res[a[pr].id] += a[pr].c * query(a[pr].y - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        tmp[tot++] = a[pr++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = l; i &lt;= mid; i++) <span class="keyword">if</span>(!a[i].op) add(a[i].y, -a[i].c);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = l; i &lt;= r; i++) a[i] = tmp[i];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cdq2</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    cdq2(l, mid);</span><br><span class="line">    cdq2(mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="keyword">int</span> pl = l, pr = mid + <span class="number">1</span>, tot = l;</span><br><span class="line">    <span class="keyword">while</span>(pl &lt;= mid &amp;&amp; pr &lt;= r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[pl].x &lt;= a[pr].x)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!a[pl].op) add(a[pl].y, a[pl].c);</span><br><span class="line">            tmp[tot++] = a[pl++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[pr].op) &#123;</span><br><span class="line">                res[a[pr].id] += a[pr].c * (query(n) - query(a[pr].y));</span><br><span class="line">            &#125;</span><br><span class="line">            tmp[tot++] = a[pr++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(pl &lt;= mid)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!a[pl].op) add(a[pl].y, a[pl].c);</span><br><span class="line">        tmp[tot++] = a[pl++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(pr &lt;= r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[pr].op) &#123;</span><br><span class="line">            res[a[pr].id] += a[pr].c * (query(n) - query(a[pr].y));</span><br><span class="line">        &#125;</span><br><span class="line">        tmp[tot++] = a[pr++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = l; i &lt;= mid; i++) <span class="keyword">if</span>(!a[i].op) add(a[i].y, -a[i].c);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = l; i &lt;= r; i++) a[i] = tmp[i];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> pos[maxn];</span><br><span class="line"><span class="keyword">int</span> x[maxn], y[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>), <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x[i];</span><br><span class="line">        pos[x[i]] = i;</span><br><span class="line">        a[++cnt] = node&#123;<span class="number">0</span>, i, x[i], <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        a[++cnt] = node&#123;<span class="number">1</span>, i, x[i], <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; y[i];</span><br><span class="line">        a[++cnt] = node&#123;<span class="number">0</span>, pos[y[i]], y[i], <span class="number">-1</span>, i&#125;;</span><br><span class="line">        a[++cnt] = node&#123;<span class="number">1</span>, pos[y[i]], y[i], <span class="number">-1</span>, i&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    cdq1(<span class="number">1</span>, cnt);</span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        pos[x[i]] = i;</span><br><span class="line">        a[++cnt] = node&#123;<span class="number">0</span>, i, x[i], <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        a[++cnt] = node&#123;<span class="number">1</span>, i, x[i], <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">        a[++cnt] = node&#123;<span class="number">0</span>, pos[y[i]], y[i], <span class="number">-1</span>, i&#125;;</span><br><span class="line">        a[++cnt] = node&#123;<span class="number">1</span>, pos[y[i]], y[i], <span class="number">-1</span>, i&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    cdq2(<span class="number">1</span>, cnt);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) res[i] += res[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) <span class="built_in">cout</span> &lt;&lt; res[i] &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></p><h4 id="4、2019-ICPC-Asia-Nanjing-Onsite-F-Paper-Grading"><a href="#4、2019-ICPC-Asia-Nanjing-Onsite-F-Paper-Grading" class="headerlink" title="4、2019-ICPC-Asia-Nanjing-Onsite-F-Paper-Grading"></a>4、<a href="https://codeforces.com/gym/257756/problem/F" target="_blank" rel="noopener">2019-ICPC-Asia-Nanjing-Onsite-F-Paper-Grading</a></h4><p>见那边吧。。。。</p><p>还有很多新奇的姿势后面学到了再补吧。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;cdq的东西和整体二分有点类似，就一起学了，学了后发现原理还是挺简单的，就是可能需要多了解一些应用和套路&lt;/p&gt;
&lt;h3 id=&quot;cdq分治概述&quot;&gt;&lt;a href=&quot;#cdq分治概述&quot; class=&quot;headerlink&quot; title=&quot;cdq分治概述&quot;&gt;&lt;/a&gt;cdq分治概述&lt;/h3&gt;&lt;p&gt;cdq分治利用分治过程中统计左半部分对右半部分的贡献，从而可以解决一些特殊的问题。主要解决的就是多维偏序的问题。&lt;/p&gt;
    
    </summary>
    
      <category term="cdq分治" scheme="http://yoursite.com/categories/cdq%E5%88%86%E6%B2%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>luogu-P3527(MET-Meteors)</title>
    <link href="http://yoursite.com/2020/01/26/luogu-P3527-MET-Meteors/"/>
    <id>http://yoursite.com/2020/01/26/luogu-P3527-MET-Meteors/</id>
    <published>2020-01-26T04:05:01.000Z</published>
    <updated>2020-01-26T04:58:19.691Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://www.luogu.com.cn/problem/P3527" target="_blank" rel="noopener">https://www.luogu.com.cn/problem/P3527</a><br>思路：这个题有些细节对理解整体二分挺有好处的：<br>1.首先对于环的情况，如果x &lt;= y就是正常区间更新，否则拆成两段即可。<br>2.这里二分的是时间t，我们把所有的询问放在更新后面（即所有陨石后面），考虑整体二分的过程，我们是对于[L, R]的序列操作是有序的，而我们希望的是将所有插入都做完后再进行询问，我们的板子写法是可以边询问边插入的，所以我们这里要将询问放在所有更新的后面。<br>3.我们需要在最后放一个inf的对于所有轨道的陨石，考虑整体二分的过程，如果入口是[1, k]的陨石，那么最后每个点的答案一定也会落到[1, k]以内，因为一直得不到满足所以一定会分到最后面去，那么就无法区分真正能在k满足和不能满足的了，所以我们需要多增加一个k + 1的点，用来区分那些不能满足的。<br>4.学到一个新技巧，如果是区间更新，但是只要单点查询的话，我们可以用一个bit来维护，考虑维护某个点的更新的差分序列，假设是[x, y]内更新z，我们在x处 +z，y + 1处-z，最后查询的时候查某个处的前缀和 + 原来的值就是更新后的值了，但只适用于单点查询。<br><a id="more"></a><br>代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;ll&gt; vl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;pii&gt; vp;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> db eps = <span class="number">1e-10</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ep emplace</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> copy(a, b) memcpy(a, b, sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PA cout &lt;&lt; <span class="meta-string">"pass\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x &amp; -x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) x.begin(), x.end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TM cout &lt;&lt; db(clock()) / CLOCKS_PER_SEC &lt;&lt; <span class="meta-string">'\n'</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e5</span> + <span class="number">233</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> op, x, y, v, pos;</span><br><span class="line">&#125;q[maxn * <span class="number">2</span>], q1[maxn * <span class="number">2</span>], q2[maxn * <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> res[<span class="number">300005</span>];</span><br><span class="line">ll c[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x &lt; maxn)&#123;</span><br><span class="line">        c[x] += d;</span><br><span class="line">        x += lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">    add(l, d);</span><br><span class="line">    add(r + <span class="number">1</span>, -d);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    ll ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">        ret += c[x];</span><br><span class="line">        x -= lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, k;</span><br><span class="line">vi id[<span class="number">300005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt; r || L &gt; R) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = L; i &lt;= R; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(q[i].op) res[q[i].pos] = l;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>, cnt1 = <span class="number">0</span>, cnt2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = L; i &lt;= R; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(q[i].op)&#123;</span><br><span class="line">            ll tmp = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;v : id[q[i].pos]) &#123;</span><br><span class="line">                tmp += query(v);</span><br><span class="line">                <span class="keyword">if</span>(tmp &gt;= q[i].v) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(q[i].v &lt;= tmp) q1[++cnt1] = q[i];</span><br><span class="line">            <span class="keyword">else</span> q[i].v -= tmp, q2[++cnt2] = q[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(q[i].pos &lt;= mid) &#123;</span><br><span class="line">                <span class="keyword">if</span>(q[i].x &lt;= q[i].y) update(q[i].x, q[i].y, q[i].v);</span><br><span class="line">                <span class="keyword">else</span> add(q[i].x,q[i].v),add(<span class="number">1</span>,q[i].v),add(q[i].y+<span class="number">1</span>,-q[i].v);</span><br><span class="line">                q1[++cnt1] = q[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> q2[++cnt2] = q[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt1; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!q1[i].op) &#123;</span><br><span class="line">            <span class="keyword">if</span>(q1[i].x &lt;= q1[i].y) update(q1[i].x, q1[i].y, -q1[i].v);</span><br><span class="line">            <span class="keyword">else</span> add(q1[i].x, -q1[i].v),add(<span class="number">1</span>,-q1[i].v),add(q1[i].y+<span class="number">1</span>,q1[i].v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt1; i++) q[L + i - <span class="number">1</span>] = q1[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt2; i++) q[L + i + cnt1 - <span class="number">1</span>] = q2[i];</span><br><span class="line">    solve(l, mid, L, L + cnt1 - <span class="number">1</span>);</span><br><span class="line">    solve(mid + <span class="number">1</span>, r, L + cnt1, R);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> p[<span class="number">300005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>, w = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">'-'</span>)w = <span class="number">-1</span>;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) s = s * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = getchar();</span><br><span class="line">    <span class="keyword">return</span> s * w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n = read();</span><br><span class="line">    m = read();</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> x = read();</span><br><span class="line">        id[x].eb(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        p[i] = read();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    k = read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> x = read(), y = read(), z = read();</span><br><span class="line">        q[++cnt] = node&#123;<span class="number">0</span>, x, y, z, i&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    q[++cnt] = node&#123;<span class="number">0</span>, <span class="number">1</span>, m, inf, k + <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        q[++cnt] = node&#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, p[i], i&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    solve(<span class="number">0</span>, k + <span class="number">1</span>, <span class="number">1</span>, cnt);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(res[i] == k + <span class="number">1</span>) <span class="built_in">puts</span>(<span class="string">"NIE"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, res[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接：&lt;a href=&quot;https://www.luogu.com.cn/problem/P3527&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.luogu.com.cn/problem/P3527&lt;/a&gt;&lt;br&gt;思路：这个题有些细节对理解整体二分挺有好处的：&lt;br&gt;1.首先对于环的情况，如果x &amp;lt;= y就是正常区间更新，否则拆成两段即可。&lt;br&gt;2.这里二分的是时间t，我们把所有的询问放在更新后面（即所有陨石后面），考虑整体二分的过程，我们是对于[L, R]的序列操作是有序的，而我们希望的是将所有插入都做完后再进行询问，我们的板子写法是可以边询问边插入的，所以我们这里要将询问放在所有更新的后面。&lt;br&gt;3.我们需要在最后放一个inf的对于所有轨道的陨石，考虑整体二分的过程，如果入口是[1, k]的陨石，那么最后每个点的答案一定也会落到[1, k]以内，因为一直得不到满足所以一定会分到最后面去，那么就无法区分真正能在k满足和不能满足的了，所以我们需要多增加一个k + 1的点，用来区分那些不能满足的。&lt;br&gt;4.学到一个新技巧，如果是区间更新，但是只要单点查询的话，我们可以用一个bit来维护，考虑维护某个点的更新的差分序列，假设是[x, y]内更新z，我们在x处 +z，y + 1处-z，最后查询的时候查某个处的前缀和 + 原来的值就是更新后的值了，但只适用于单点查询。&lt;br&gt;
    
    </summary>
    
      <category term="整体二分" scheme="http://yoursite.com/categories/%E6%95%B4%E4%BD%93%E4%BA%8C%E5%88%86/"/>
    
    
  </entry>
  
  <entry>
    <title>整体二分浅谈</title>
    <link href="http://yoursite.com/2020/01/25/%E6%95%B4%E4%BD%93%E4%BA%8C%E5%88%86%E6%B5%85%E8%B0%88/"/>
    <id>http://yoursite.com/2020/01/25/整体二分浅谈/</id>
    <published>2020-01-25T08:03:05.000Z</published>
    <updated>2020-01-26T15:39:56.096Z</updated>
    
    <content type="html"><![CDATA[<p>家里蹲得无聊，趁机多学点新东西吧，好久前就看到这玩意，直接现在终于有机会看了。</p><h3 id="整体二分概念"><a href="#整体二分概念" class="headerlink" title="整体二分概念"></a>整体二分概念</h3><p>整体二分讲的是个什么事情呢，我们考虑普通二分，二分一个值，然后我们去check它，对于单次询问可以非常容易解决。但如果有多组询问，我们对于每一个询问都来一次普通二分的话，复杂度就爆炸了。事实上考虑二分过程中有很多check操作是重复的，我们如果能把他们一起拿来二分，并且根据mid值将他们分为两组，一组到[l, mid]里面继续去check，一组到[mid + 1, r]里面继续去check，这样复杂度就被降下来了，这也是一个非常直观的想法，整体二分就是用来干这个的。</p><h3 id="整体二分流程"><a href="#整体二分流程" class="headerlink" title="整体二分流程"></a>整体二分流程</h3><p>首先我们把操作分为插入操作和查询操作，我们假设原序列为空，所有的数都是需要插入进去的。查询操作就顾名思义了。</p><p>整体二分我们考虑递归来做，用四元组(l, r, L, R)表示对于二分值域[l, r]，要处理操作序列[L, R]的结果。注意这里对于L以前的操作一定都被处理过了，具体原因见后。</p><p>我们找到mid(mid = (l + r ) / 2)，我们查看序列[l, r]内所有操作，如果他是插入操作并且小于等于mid，我们把他分到左边，并且更新对应的值（bit/线段树/其他），否则我们把它分到右边。如果他是查询操作，我们看他是否达到要求（比如查询第k小就看是否已经大于第k小，根据情况分到左右两边去），最后我们就得到一个根据mid分出来的两个原来的操作序列。</p><p>分出来以后，记得得把之前用来分序列时候在bit/线段树/其他上的更新给撤销回来，然后根据分出来的序列重新排一下原来操作序列，并且递归到左右两边去做即可。这里我们发现更新完右边区间一定在左边区间后面处理，所以之前说的l以前的序列操作一定都已经处理过了。</p><p>当l == r的时候，我们对于[L, R]上的所有查询操作更新对应位置的答案即可。</p><a id="more"></a><h4 id="一些例题"><a href="#一些例题" class="headerlink" title="一些例题"></a>一些例题</h4><p>1、<a href="https://www.luogu.com.cn/problem/P3834" target="_blank" rel="noopener">可持久化线段树</a><br>这个题可以用整体二分来做，最基本的模板题<br><div><div class="fold_hider"><div class="close hider_title">代码</div></div><div class="fold"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;ll&gt; vl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;pii&gt; vp;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> db eps = <span class="number">1e-10</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ep emplace</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> copy(a, b) memcpy(a, b, sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PA cout &lt;&lt; <span class="meta-string">"pass\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x &amp; -x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) x.begin(), x.end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TM cout &lt;&lt; db(clock()) / CLOCKS_PER_SEC &lt;&lt; <span class="meta-string">'\n'</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e5</span> + <span class="number">233</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> op, x, y, k, pos;</span><br><span class="line">&#125;q[maxn], ql[maxn], qr[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> res[maxn];</span><br><span class="line"><span class="keyword">int</span> c[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x &lt; maxn)&#123;</span><br><span class="line">        c[x] += d;</span><br><span class="line">        x += lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">        ret += c[x];</span><br><span class="line">        x -= lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt; r || L &gt; R) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = L; i &lt;= R; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(q[i].op) res[q[i].pos] = l;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>, cnt1 = <span class="number">0</span>, cnt2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = L; i &lt;= R; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(q[i].op)&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = query(q[i].y) - query(q[i].x - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(tmp &gt;= q[i].k) ql[++cnt1] = q[i];</span><br><span class="line">            <span class="keyword">else</span> q[i].k -= tmp, qr[++cnt2] = q[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(q[i].x &lt;= mid) ql[++cnt1] = q[i], add(q[i].pos, q[i].y);</span><br><span class="line">            <span class="keyword">else</span> qr[++cnt2] = q[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt1; i++) <span class="keyword">if</span>(!ql[i].op) add(ql[i].pos, -ql[i].y);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt1; i++) q[L + i - <span class="number">1</span>] = ql[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt2; i++) q[L + cnt1 + i - <span class="number">1</span>] = qr[i];</span><br><span class="line">    solve(l, mid, L, L + cnt1 - <span class="number">1</span>);</span><br><span class="line">    solve(mid + <span class="number">1</span>, r, L + cnt1, R);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>), <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">        q[++cnt] = node&#123;<span class="number">0</span>, x, <span class="number">1</span>, <span class="number">0</span>, i&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> x, y, k;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y &gt;&gt; k;</span><br><span class="line">        q[++cnt] = node&#123;<span class="number">1</span>, x, y, k, i&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    solve(-inf, inf, <span class="number">1</span>, cnt);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; res[i] &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></p><p>2、<a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3110" target="_blank" rel="noopener">bzoj3110 k大数查询</a><br>需要稍微转换一下，因为值域为[-n, n]，考虑把k大关于n对称一下变成n - val + 1，这样就变成了求第k小，最后求得答案ans时再通过res = n - ans + 1变换回来即可。因为操作是区间更新这里用线段树即可。<br><div><div class="fold_hider"><div class="close hider_title">代码</div></div><div class="fold"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;ll&gt; vl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;pii&gt; vp;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> db eps = <span class="number">1e-10</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ep emplace</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> copy(a, b) memcpy(a, b, sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PA cout &lt;&lt; <span class="meta-string">"pass\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x &amp; -x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) x.begin(), x.end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TM cout &lt;&lt; db(clock()) / CLOCKS_PER_SEC &lt;&lt; <span class="meta-string">'\n'</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">233</span>;</span><br><span class="line">ll sum[maxn &lt;&lt; <span class="number">2</span>], tag[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> o)</span></span>&#123;</span><br><span class="line">    sum[o] = sum[o &lt;&lt; <span class="number">1</span>] + sum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tag[o])&#123;</span><br><span class="line">        tag[o &lt;&lt; <span class="number">1</span>] += tag[o];</span><br><span class="line">        tag[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] += tag[o];</span><br><span class="line">        sum[o &lt;&lt; <span class="number">1</span>] += tag[o] * (m - (m &gt;&gt; <span class="number">1</span>));</span><br><span class="line">        sum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] += tag[o] * (m &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        tag[o] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> tl, <span class="keyword">int</span> tr, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt; tr || tl &gt; r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(l &lt;= tl &amp;&amp; tr &lt;= r)&#123;</span><br><span class="line">        sum[o] += <span class="number">1l</span>l * (tr - tl + <span class="number">1</span>) * v;</span><br><span class="line">        tag[o] += v;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pushdown(o, tr - tl + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> mid = tl + tr &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    update(o &lt;&lt; <span class="number">1</span>, tl, mid, l, r, v);</span><br><span class="line">    update(o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, tr, l, r, v);</span><br><span class="line">    pushup(o);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> tl, <span class="keyword">int</span> tr, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt; tr || tl &gt; r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l &lt;= tl &amp;&amp; tr &lt;= r) <span class="keyword">return</span> sum[o];</span><br><span class="line">    pushdown(o, tr - tl + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> mid = tl + tr &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> query(o &lt;&lt; <span class="number">1</span>, tl, mid, l, r) + query(o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, tr, l, r);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    ll op, x, y, k, pos;</span><br><span class="line">&#125;q[maxn], q1[maxn], q2[maxn];</span><br><span class="line"> </span><br><span class="line">ll res[maxn];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt; r || L &gt; R) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = L; i &lt;= R; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(q[i].op) res[q[i].pos] =  n - l + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>, cnt1 = <span class="number">0</span>, cnt2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = L; i &lt;= R; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(q[i].op)&#123;</span><br><span class="line">            ll tmp = query(<span class="number">1</span>, <span class="number">1</span>, n, q[i].x, q[i].y);</span><br><span class="line">            <span class="keyword">if</span>(q[i].k &lt;= tmp) q1[++cnt1] = q[i];</span><br><span class="line">            <span class="keyword">else</span> q[i].k -= tmp, q2[++cnt2] = q[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(q[i].k &lt;= mid) q1[++cnt1] = q[i], update(<span class="number">1</span>, <span class="number">1</span>, n, q[i].x, q[i].y, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span> q2[++cnt2] = q[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt1; i++) <span class="keyword">if</span>(!q1[i].op) update(<span class="number">1</span>, <span class="number">1</span>, n, q1[i].x, q1[i].y, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt1; i++) q[L + i - <span class="number">1</span>] = q1[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt2; i++) q[L + cnt1 + i - <span class="number">1</span>] = q2[i];</span><br><span class="line">    solve(l, mid, L, L + cnt1 - <span class="number">1</span>);</span><br><span class="line">    solve(mid + <span class="number">1</span>, r, L + cnt1, R);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>), <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">        ll op, x, y, k;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; op &gt;&gt; x &gt;&gt; y &gt;&gt; k;</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">1</span>) q[i] = node&#123;<span class="number">0</span>, x, y, n - k + <span class="number">1</span>, i&#125;;</span><br><span class="line">        <span class="keyword">else</span> q[i] = node&#123;<span class="number">1</span>, x, y, k, ++tot&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    solve(-n, n, <span class="number">1</span>, m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; ++i) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; res[i] &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></p><p>3、<a href="https://www.luogu.com.cn/problem/P1527" target="_blank" rel="noopener">[国家集训队]矩阵乘法</a><br>这个题跟第一个差不多，只用把里面的树状数组换成二维的bit就行了，<strong>这里注意可以离散化后直接对下标二分，这样常数可以少好几倍。</strong><br><div><div class="fold_hider"><div class="close hider_title">代码</div></div><div class="fold"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;ll&gt; vl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;pii&gt; vp;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> db eps = <span class="number">1e-10</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ep emplace</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> copy(a, b) memcpy(a, b, sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PA cout &lt;&lt; <span class="meta-string">"pass\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x &amp; -x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) x.begin(), x.end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TM cout &lt;&lt; db(clock()) / CLOCKS_PER_SEC &lt;&lt; <span class="meta-string">'\n'</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">550</span>;</span><br><span class="line"><span class="keyword">int</span> c[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = x; i &lt; maxn; i += lowbit(i))&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = y; j &lt; maxn; j += lowbit(j))&#123;</span><br><span class="line">            c[i][j] += d;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = x; i; i -= lowbit(i))&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = y; j; j -= lowbit(j))&#123;</span><br><span class="line">            ret += c[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sum(x2, y2) - sum(x1 - <span class="number">1</span>, y2) - sum(x2, y1 - <span class="number">1</span>) + sum(x1 - <span class="number">1</span>, y1 - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e6</span> + <span class="number">233</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> op, x1, y1, x2, y2, k, pos;</span><br><span class="line">&#125;q[maxm], q1[maxm], q2[maxm];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> res[maxm];</span><br><span class="line"></span><br><span class="line">vi pos;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt; r || L &gt; R) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = L; i &lt;= R; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(q[i].op) res[q[i].pos] = pos[l];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>, cnt1 = <span class="number">0</span>, cnt2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = L; i &lt;= R; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(q[i].op)&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = query(q[i].x1, q[i].y1, q[i].x2, q[i].y2);</span><br><span class="line">            <span class="keyword">if</span>(tmp &gt;= q[i].k) q1[++cnt1] = q[i];</span><br><span class="line">            <span class="keyword">else</span> q[i].k -= tmp, q2[++cnt2] = q[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(q[i].x2 &lt;= pos[mid]) add(q[i].x1, q[i].y1, <span class="number">1</span>), q1[++cnt1] = q[i];</span><br><span class="line">            <span class="keyword">else</span> q2[++cnt2] = q[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt1; i++) <span class="keyword">if</span>(!q1[i].op) add(q1[i].x1, q1[i].y1, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt1; i++) q[L + i - <span class="number">1</span>] = q1[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt2; i++) q[L + i + cnt1 - <span class="number">1</span>] = q2[i];</span><br><span class="line">    solve(l, mid, L, L + cnt1 - <span class="number">1</span>);</span><br><span class="line">    solve(mid + <span class="number">1</span>, r, L + cnt1, R);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>), <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)&#123;</span><br><span class="line">            <span class="keyword">int</span> t;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">            q[++cnt] = node&#123;<span class="number">0</span>, i, j, t, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">            pos.eb(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(all(pos));</span><br><span class="line">    pos.resize(unique(all(pos)) - pos.begin());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> x1, y1, x2, y2, k;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2 &gt;&gt; k;</span><br><span class="line">        q[++cnt] = node&#123;<span class="number">1</span>, x1, y1, x2, y2, k, i&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    solve(<span class="number">0</span>, pos.size() - <span class="number">1</span>, <span class="number">1</span>, cnt);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; res[i] &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;家里蹲得无聊，趁机多学点新东西吧，好久前就看到这玩意，直接现在终于有机会看了。&lt;/p&gt;
&lt;h3 id=&quot;整体二分概念&quot;&gt;&lt;a href=&quot;#整体二分概念&quot; class=&quot;headerlink&quot; title=&quot;整体二分概念&quot;&gt;&lt;/a&gt;整体二分概念&lt;/h3&gt;&lt;p&gt;整体二分讲的是个什么事情呢，我们考虑普通二分，二分一个值，然后我们去check它，对于单次询问可以非常容易解决。但如果有多组询问，我们对于每一个询问都来一次普通二分的话，复杂度就爆炸了。事实上考虑二分过程中有很多check操作是重复的，我们如果能把他们一起拿来二分，并且根据mid值将他们分为两组，一组到[l, mid]里面继续去check，一组到[mid + 1, r]里面继续去check，这样复杂度就被降下来了，这也是一个非常直观的想法，整体二分就是用来干这个的。&lt;/p&gt;
&lt;h3 id=&quot;整体二分流程&quot;&gt;&lt;a href=&quot;#整体二分流程&quot; class=&quot;headerlink&quot; title=&quot;整体二分流程&quot;&gt;&lt;/a&gt;整体二分流程&lt;/h3&gt;&lt;p&gt;首先我们把操作分为插入操作和查询操作，我们假设原序列为空，所有的数都是需要插入进去的。查询操作就顾名思义了。&lt;/p&gt;
&lt;p&gt;整体二分我们考虑递归来做，用四元组(l, r, L, R)表示对于二分值域[l, r]，要处理操作序列[L, R]的结果。注意这里对于L以前的操作一定都被处理过了，具体原因见后。&lt;/p&gt;
&lt;p&gt;我们找到mid(mid = (l + r ) / 2)，我们查看序列[l, r]内所有操作，如果他是插入操作并且小于等于mid，我们把他分到左边，并且更新对应的值（bit/线段树/其他），否则我们把它分到右边。如果他是查询操作，我们看他是否达到要求（比如查询第k小就看是否已经大于第k小，根据情况分到左右两边去），最后我们就得到一个根据mid分出来的两个原来的操作序列。&lt;/p&gt;
&lt;p&gt;分出来以后，记得得把之前用来分序列时候在bit/线段树/其他上的更新给撤销回来，然后根据分出来的序列重新排一下原来操作序列，并且递归到左右两边去做即可。这里我们发现更新完右边区间一定在左边区间后面处理，所以之前说的l以前的序列操作一定都已经处理过了。&lt;/p&gt;
&lt;p&gt;当l == r的时候，我们对于[L, R]上的所有查询操作更新对应位置的答案即可。&lt;/p&gt;
    
    </summary>
    
      <category term="整体二分" scheme="http://yoursite.com/categories/%E6%95%B4%E4%BD%93%E4%BA%8C%E5%88%86/"/>
    
    
  </entry>
  
  <entry>
    <title>2020 CCPC-Wannafly Winter Camp Day2 (Div.1&amp;2)-F(采蘑菇的克拉莉丝)</title>
    <link href="http://yoursite.com/2020/01/21/2020-CCPC-Wannafly-Winter-Camp-Day2-Div-1-2-F-%E9%87%87%E8%98%91%E8%8F%87%E7%9A%84%E5%85%8B%E6%8B%89%E8%8E%89%E4%B8%9D/"/>
    <id>http://yoursite.com/2020/01/21/2020-CCPC-Wannafly-Winter-Camp-Day2-Div-1-2-F-采蘑菇的克拉莉丝/</id>
    <published>2020-01-21T12:34:45.000Z</published>
    <updated>2020-01-21T12:44:04.770Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://ac.nowcoder.com/acm/contest/4010/F" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/4010/F</a><br>思路：非常好的利用了轻重链的思想，一开始想法是，一个点更新后，对除了它到根节点这条链上的点以外，对其他点的贡献都是他们父亲那条边的权值 * x，但是这条链上的就非常不好办了。事实上这个题的做法就非常有启发性，因为我们没法同时维护多个儿子的贡献和（因为他们边权不一样），我们考虑只维护重儿子的，这样我们可以用dfs序建树状数组，对于重儿子的贡献我们直接查子树内修改了多少即可。对于轻儿子的贡献我们考虑暴力更新。那么当一个点修改后，我们一直跳链，只要他不是父亲的重儿子，我们把贡献更新到父亲上，一直跳到根节点为止，这个过程是O(logn)的，所以总复杂度是O(nlogn)<br><a id="more"></a><br>代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;ll&gt; vl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;pii&gt; vp;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> db eps = <span class="number">1e-10</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ep emplace</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> copy(a, b) memcpy(a, b, sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PA cout &lt;&lt; <span class="meta-string">"pass\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x &amp; -x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) x.begin(), x.end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TM cout &lt;&lt; db(clock()) / CLOCKS_PER_SEC &lt;&lt; <span class="meta-string">'\n'</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">233</span>;</span><br><span class="line"><span class="keyword">int</span> f[maxn], son[maxn], top[maxn], sz[maxn], d[maxn], rk[maxn], id[maxn], dfs_clock;</span><br><span class="line">vi G[maxn];</span><br><span class="line"><span class="keyword">int</span> cost[maxn], out[maxn], w[maxn];</span><br><span class="line">ll c[maxn], cnt[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> from, to, dist;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; edges;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to, <span class="keyword">int</span> dist)</span></span>&#123;</span><br><span class="line">    edges.push_back(edge&#123;from, to, dist&#125;);</span><br><span class="line">    G[from].push_back(edges.size() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">    f[u] = fa;</span><br><span class="line">    d[u] = d[fa] + <span class="number">1</span>;</span><br><span class="line">    sz[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G[u].size(); i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> v = edges[G[u][i]].to;</span><br><span class="line">        <span class="keyword">if</span>(v == fa) <span class="keyword">continue</span>;</span><br><span class="line">        dfs1(v, u);</span><br><span class="line">        cost[v] = edges[G[u][i]].dist;</span><br><span class="line">        sz[u] += sz[v];</span><br><span class="line">        <span class="keyword">if</span>(sz[v] &gt; sz[son[u]]) son[u] = v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    top[u] = t;</span><br><span class="line">    id[u] = ++dfs_clock;</span><br><span class="line">    rk[dfs_clock] = u;</span><br><span class="line">    <span class="keyword">if</span>(son[u])</span><br><span class="line">    dfs2(son[u], t);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G[u].size(); i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> v = edges[G[u][i]].to;</span><br><span class="line">        <span class="keyword">if</span>(v == son[u]) w[u] = edges[G[u][i]].dist;</span><br><span class="line">        <span class="keyword">if</span>(v != son[u] &amp;&amp; v != f[u]) dfs2(v, v);</span><br><span class="line">    &#125;</span><br><span class="line">    out[u] = dfs_clock;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x &lt; maxn)&#123;</span><br><span class="line">        c[x] += d;</span><br><span class="line">        x += lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    ll ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (x) &#123;</span><br><span class="line">        ret += c[x];</span><br><span class="line">        x -= lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar(); <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch == <span class="string">'-'</span>) f = <span class="number">-1</span>;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125; <span class="keyword">while</span>(<span class="string">'0'</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">        x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125; <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    n = read();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = read(), v = read(), w = read();</span><br><span class="line">        addedge(u, v, w);</span><br><span class="line">        addedge(v, u, w);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs1(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    dfs2(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    q = read();</span><br><span class="line">    <span class="keyword">int</span> now = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> op, x, y;</span><br><span class="line">        op = read();</span><br><span class="line">        x = read();</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">            y = read();</span><br><span class="line">            add(id[x], y);</span><br><span class="line">            <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!x) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">int</span> tmp = f[x];</span><br><span class="line">                <span class="keyword">if</span> (son[tmp] != x) cnt[tmp] += <span class="number">1l</span>l * y * cost[x];</span><br><span class="line">                x = f[top[x]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            now = x;</span><br><span class="line">        &#125;</span><br><span class="line">        ll t1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (son[now]) t1 = <span class="number">1l</span>l * (query(out[son[now]]) - query(id[son[now]] - <span class="number">1</span>)) * w[now];</span><br><span class="line">        ll t2 = <span class="number">1l</span>l * cost[now] * (query(n) - (query(out[now]) - query(id[now] - <span class="number">1</span>)));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, t1 + t2 + cnt[now]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接：&lt;a href=&quot;https://ac.nowcoder.com/acm/contest/4010/F&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://ac.nowcoder.com/acm/contest/4010/F&lt;/a&gt;&lt;br&gt;思路：非常好的利用了轻重链的思想，一开始想法是，一个点更新后，对除了它到根节点这条链上的点以外，对其他点的贡献都是他们父亲那条边的权值 * x，但是这条链上的就非常不好办了。事实上这个题的做法就非常有启发性，因为我们没法同时维护多个儿子的贡献和（因为他们边权不一样），我们考虑只维护重儿子的，这样我们可以用dfs序建树状数组，对于重儿子的贡献我们直接查子树内修改了多少即可。对于轻儿子的贡献我们考虑暴力更新。那么当一个点修改后，我们一直跳链，只要他不是父亲的重儿子，我们把贡献更新到父亲上，一直跳到根节点为止，这个过程是O(logn)的，所以总复杂度是O(nlogn)&lt;br&gt;
    
    </summary>
    
      <category term="树链剖分" scheme="http://yoursite.com/categories/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
    
    
  </entry>
  
  <entry>
    <title>2020 CCPC-Wannafly Winter Camp Day2 (Div.1&amp;2)-E(阔力梯的树)</title>
    <link href="http://yoursite.com/2020/01/16/2020-CCPC-Wannafly-Winter-Camp-Day2-Div-1-2-E-%E9%98%94%E5%8A%9B%E6%A2%AF%E7%9A%84%E6%A0%91/"/>
    <id>http://yoursite.com/2020/01/16/2020-CCPC-Wannafly-Winter-Camp-Day2-Div-1-2-E-阔力梯的树/</id>
    <published>2020-01-15T16:46:47.000Z</published>
    <updated>2020-01-21T12:31:05.042Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://ac.nowcoder.com/acm/contest/4010/E" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/4010/E</a><br>思路：南昌深受伤害后果然看到这个题第一反应就是拿数据结构维护下dsu on tree，这里用个set就行了，如果可能出现一样的点就用multiset，然后讨论下插入时在开头，结尾和中间三种情况即可。<br><a id="more"></a><br>代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;ll&gt; vl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;pii&gt; vp;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> db eps = <span class="number">1e-10</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ep emplace</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> copy(a, b) memcpy(a, b, sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PA cout &lt;&lt; <span class="meta-string">"pass\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x &amp; -x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) x.begin(), x.end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TM cout &lt;&lt; db(clock()) / CLOCKS_PER_SEC &lt;&lt; <span class="meta-string">'\n'</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">233</span>;</span><br><span class="line">vi G[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> son[maxn], sz[maxn];</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line">ll res[maxn];</span><br><span class="line">ll ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getroot</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    sz[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;v : G[u])&#123;</span><br><span class="line">        getroot(v);</span><br><span class="line">        sz[u] += sz[v];</span><br><span class="line">        <span class="keyword">if</span>(sz[son[u]] &lt; sz[v]) son[u] = v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getans</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">bool</span> op)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (op) &#123;</span><br><span class="line">        <span class="keyword">auto</span> it = s.lower_bound(a[u]);</span><br><span class="line">        <span class="keyword">if</span> (s.begin() == s.end()) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (it == s.begin()) &#123;</span><br><span class="line">                ans += <span class="number">1l</span>l * a[u] * a[u] + <span class="number">1l</span>l * (*it) * (*it) - <span class="number">2l</span>l * a[u] * (*it);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (it == s.end()) &#123;</span><br><span class="line">                <span class="keyword">auto</span> now = it--;</span><br><span class="line">                ans += <span class="number">1l</span>l * a[u] * a[u] + <span class="number">1l</span>l * (*it) * (*it) - <span class="number">2l</span>l * a[u] * (*it);</span><br><span class="line">                it = now;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(it != s.begin() &amp;&amp; it != s.end()) &#123;</span><br><span class="line">                ans += <span class="number">2l</span>l * a[u] * a[u];</span><br><span class="line">                <span class="keyword">auto</span> now = it;</span><br><span class="line">                it--;</span><br><span class="line">                ans += <span class="number">2l</span>l * (*it) * (*now);</span><br><span class="line">                ans -= <span class="number">2l</span>l * a[u] * (*it) + <span class="number">2l</span>l * a[u] * (*now);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        s.insert(a[u]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        s.erase(s.find(a[u]));</span><br><span class="line">        <span class="keyword">auto</span> it = s.lower_bound(a[u]);</span><br><span class="line">        <span class="keyword">if</span> (s.begin() == s.end()) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (it == s.begin()) &#123;</span><br><span class="line">                ans -= <span class="number">1l</span>l * a[u] * a[u] + <span class="number">1l</span>l * (*it) * (*it) - <span class="number">2l</span>l * a[u] * (*it);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (it == s.end()) &#123;</span><br><span class="line">                <span class="keyword">auto</span> now = it--;</span><br><span class="line">                ans -= <span class="number">1l</span>l * a[u] * a[u] + <span class="number">1l</span>l * (*it) * (*it) - <span class="number">2l</span>l * a[u] * (*it);</span><br><span class="line">                it = now;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(it != s.begin() &amp;&amp; it != s.end()) &#123;</span><br><span class="line">                ans -= <span class="number">2l</span>l * a[u] * a[u];</span><br><span class="line">                <span class="keyword">auto</span> now = it;</span><br><span class="line">                it--;</span><br><span class="line">                ans -= <span class="number">2l</span>l * (*it) * (*now);</span><br><span class="line">                ans += <span class="number">2l</span>l * a[u] * (*it) + <span class="number">2l</span>l * a[u] * (*now);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;v : G[u])&#123;</span><br><span class="line">        getans(v, op);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">bool</span> ok)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;v : G[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v == son[u]) <span class="keyword">continue</span>;</span><br><span class="line">        dfs(v, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(son[u])&#123;</span><br><span class="line">        dfs(son[u], <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;v : G[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v == son[u]) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        getans(v, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> it = s.lower_bound(a[u]);</span><br><span class="line">    <span class="keyword">if</span> (s.begin() == s.end()) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (it == s.begin()) &#123;</span><br><span class="line">            ans += <span class="number">1l</span>l * a[u] * a[u] + <span class="number">1l</span>l * (*it) * (*it) - <span class="number">2l</span>l * a[u] * (*it);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (it == s.end()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> now = it;</span><br><span class="line">            it--;</span><br><span class="line">            ans += <span class="number">1l</span>l * a[u] * a[u] + <span class="number">1l</span>l * (*it) * (*it) - <span class="number">2l</span>l * a[u] * (*it);</span><br><span class="line">            it = now;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(it != s.begin() &amp;&amp; it != s.end()) &#123;</span><br><span class="line">            ans += <span class="number">2l</span>l * a[u] * a[u];</span><br><span class="line">            <span class="keyword">auto</span> now = it;</span><br><span class="line">            it--;</span><br><span class="line">            ans += <span class="number">2l</span>l * (*it) * (*now);</span><br><span class="line">            ans -= <span class="number">2l</span>l * a[u] * (*it) + <span class="number">2l</span>l * a[u] * (*now);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    s.insert(a[u]);</span><br><span class="line">    res[u] = ans;</span><br><span class="line">    <span class="keyword">if</span>(!ok) getans(u, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>), <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        a[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> u;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u;</span><br><span class="line">        G[u].eb(i);</span><br><span class="line">    &#125;</span><br><span class="line">    getroot(<span class="number">1</span>);</span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">cout</span> &lt;&lt; res[i] &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接：&lt;a href=&quot;https://ac.nowcoder.com/acm/contest/4010/E&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://ac.nowcoder.com/acm/contest/4010/E&lt;/a&gt;&lt;br&gt;思路：南昌深受伤害后果然看到这个题第一反应就是拿数据结构维护下dsu on tree，这里用个set就行了，如果可能出现一样的点就用multiset，然后讨论下插入时在开头，结尾和中间三种情况即可。&lt;br&gt;
    
    </summary>
    
      <category term="dsu on tree" scheme="http://yoursite.com/categories/dsu-on-tree/"/>
    
    
  </entry>
  
  <entry>
    <title>2020 CCPC-Wannafly Winter Camp Day2 (Div.1&amp;2)-D(卡拉巴什的字符串)</title>
    <link href="http://yoursite.com/2020/01/16/2020-CCPC-Wannafly-Winter-Camp-Day2-Div-1-2-D-%E5%8D%A1%E6%8B%89%E5%B7%B4%E4%BB%80%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://yoursite.com/2020/01/16/2020-CCPC-Wannafly-Winter-Camp-Day2-Div-1-2-D-卡拉巴什的字符串/</id>
    <published>2020-01-15T16:40:40.000Z</published>
    <updated>2020-01-21T12:31:39.289Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://ac.nowcoder.com/acm/contest/4010/D" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/4010/D</a><br>思路：考虑后缀自动机动态加字符，那么对于每个有子节点的点，说明这个节点代表的串一定有是某两个后缀串的公共后缀，考虑把期中某个延长到当前的加入节点，其实也就是两个后置的最长公共前缀，并且发现一个性质，后面再怎么加，这个点在SAM上的长度信息是不会改变的了。所以我们只需要在新建点的时候，只要他有子节点了，就把他的长度标记一下，然后看最短的没有标记过的长度是多少就行了。（注意点1因为是虚点，所以需要至少两个子节点才能成为两个串的前缀）。<br><a id="more"></a><br>代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;ll&gt; vl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;pii&gt; vp;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> db eps = <span class="number">1e-10</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ep emplace</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> copy(a, b) memcpy(a, b, sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PA cout &lt;&lt; <span class="meta-string">"pass\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x &amp; -x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) x.begin(), x.end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TM cout &lt;&lt; db(clock()) / CLOCKS_PER_SEC &lt;&lt; <span class="meta-string">'\n'</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sigma_size 28</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> len[maxn * <span class="number">2</span>]; <span class="comment">//最长子串的长度(该节点字串数量=len[x]-len[f[x]])</span></span><br><span class="line"><span class="keyword">int</span> f[maxn * <span class="number">2</span>];   <span class="comment">//后缀链接(最短串前部减少一个字符所到达的状态)</span></span><br><span class="line"><span class="keyword">int</span> cnt[maxn * <span class="number">2</span>];    <span class="comment">//被后缀连接的数</span></span><br><span class="line"><span class="keyword">int</span> ch[maxn * <span class="number">2</span>][sigma_size];  <span class="comment">//状态转移(尾部加一个字符的下一个状态)(图)</span></span><br><span class="line"><span class="keyword">int</span> idx; <span class="comment">//节点编号</span></span><br><span class="line"><span class="keyword">int</span> last;    <span class="comment">//最后节点</span></span><br><span class="line">ll epos[maxn * <span class="number">2</span>]; <span class="comment">// enpos数（该状态子串出现数量）</span></span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn * <span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> tmp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;   <span class="comment">//初始化</span></span><br><span class="line">    last = idx = <span class="number">1</span>; <span class="comment">//1表示root起始点 空集</span></span><br><span class="line">    f[<span class="number">1</span>] = len[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(ch[<span class="number">1</span>], <span class="number">0</span>, <span class="keyword">sizeof</span>(ch[<span class="number">1</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//SAM建图</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123;     <span class="comment">//插入字符，为字符ascll码值</span></span><br><span class="line">    <span class="keyword">int</span> x = ++idx; <span class="comment">//创建一个新节点x;</span></span><br><span class="line">    len[x] = len[last] + <span class="number">1</span>; <span class="comment">//  长度等于最后一个节点+1</span></span><br><span class="line">    epos[x] = <span class="number">1</span>;  <span class="comment">//接受节点子串除后缀连接还需加一</span></span><br><span class="line">    <span class="keyword">int</span> p;  <span class="comment">//第一个有C转移的节点;</span></span><br><span class="line">    <span class="keyword">for</span> (p = last; p &amp;&amp; !ch[p][c]; p = f[p])ch[p][c] = x;<span class="comment">//沿着后缀连接 将所有没有字符c转移的节点直接指向新节点</span></span><br><span class="line">    <span class="keyword">if</span> (!p)f[x] = <span class="number">1</span>, cnt[<span class="number">1</span>]++;  <span class="comment">//全部都没有c的转移 直接将新节点后缀连接到起点</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> q = ch[p][c];    <span class="comment">//p通过c转移到的节点</span></span><br><span class="line">        <span class="keyword">if</span> (len[p] + <span class="number">1</span> == len[q])    <span class="comment">//pq是连续的</span></span><br><span class="line">            f[x] = q, cnt[q]++; <span class="comment">//将新节点后缀连接指向q即可,q节点的被后缀连接数+1</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> nq = ++idx;   <span class="comment">//不连续 需要复制一份q节点</span></span><br><span class="line">            len[nq] = len[p] + <span class="number">1</span>;   <span class="comment">//令nq与p连续</span></span><br><span class="line">            f[nq] = f[q];   <span class="comment">//因后面link[q]改变此处不加cnt</span></span><br><span class="line">            vis[len[nq]] = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memcpy</span>(ch[nq], ch[q], <span class="keyword">sizeof</span>(ch[q]));  <span class="comment">//复制q的信息给nq</span></span><br><span class="line">            <span class="keyword">for</span> (; p &amp;&amp; ch[p][c] == q; p = f[p])</span><br><span class="line">                ch[p][c] = nq;    <span class="comment">//沿着后缀连接 将所有通过c转移为q的改为nq</span></span><br><span class="line">            f[q] = f[x] = nq; <span class="comment">//将x和q后缀连接改为nq</span></span><br><span class="line">            cnt[nq] += <span class="number">2</span>; <span class="comment">//  nq增加两个后缀连接</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    last = x;  <span class="comment">//更新最后处理的节点</span></span><br><span class="line">    <span class="keyword">if</span>(f[x] != <span class="number">1</span>) vis[len[f[x]]] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(f[x] == <span class="number">1</span>) tmp++;</span><br><span class="line">    <span class="keyword">if</span>(tmp &gt; <span class="number">1</span>) vis[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T, n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= idx; i++)&#123;</span><br><span class="line">            f[i] = len[i] = vis[i] = <span class="number">0</span>;</span><br><span class="line">            mem(ch[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        tmp = <span class="number">0</span>;</span><br><span class="line">        init();</span><br><span class="line">        n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            add(s[i] - <span class="string">'a'</span>);</span><br><span class="line">            <span class="keyword">while</span>(vis[res]) res++;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, res, i == n ? <span class="string">'\n'</span> : <span class="string">' '</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接：&lt;a href=&quot;https://ac.nowcoder.com/acm/contest/4010/D&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://ac.nowcoder.com/acm/contest/4010/D&lt;/a&gt;&lt;br&gt;思路：考虑后缀自动机动态加字符，那么对于每个有子节点的点，说明这个节点代表的串一定有是某两个后缀串的公共后缀，考虑把期中某个延长到当前的加入节点，其实也就是两个后置的最长公共前缀，并且发现一个性质，后面再怎么加，这个点在SAM上的长度信息是不会改变的了。所以我们只需要在新建点的时候，只要他有子节点了，就把他的长度标记一下，然后看最短的没有标记过的长度是多少就行了。（注意点1因为是虚点，所以需要至少两个子节点才能成为两个串的前缀）。&lt;br&gt;
    
    </summary>
    
      <category term="后缀自动机" scheme="http://yoursite.com/categories/%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>2020 CCPC-Wannafly Winter Camp Day2 (Div.1&amp;2)-B(萨博的方程式)</title>
    <link href="http://yoursite.com/2020/01/16/2020-CCPC-Wannafly-Winter-Camp-Day2-Div-1-2-B-%E8%90%A8%E5%8D%9A%E7%9A%84%E6%96%B9%E7%A8%8B%E5%BC%8F/"/>
    <id>http://yoursite.com/2020/01/16/2020-CCPC-Wannafly-Winter-Camp-Day2-Div-1-2-B-萨博的方程式/</id>
    <published>2020-01-15T16:34:27.000Z</published>
    <updated>2020-01-21T12:31:58.106Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://ac.nowcoder.com/acm/contest/4010/B" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/4010/B</a><br>思路：考虑从高到低位枚举，假设前面都贴着边界，那么该位所有本来上限为0的地方只能填0，上限为1的地方可以填0和1，我们发现如果填0，其他位可以按满足限制随便填，这样这一位一定能确定一个唯一解。如果有多个填0，那么有一个用来确定唯一解，其他都可以随便填。如果填1，后面可以按限制随便填，那么这里的这个过程我们可以用dp来计数。考虑如果所有的本来为1的位置都填了1，就得枚举下一位了，发现是一个子问题，同样方法计算即可。最后把和k在这一位奇偶相同的地方求和就是答案。<br><a id="more"></a><br>代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;ll&gt; vl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;pii&gt; vp;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> db eps = <span class="number">1e-10</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ep emplace</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> copy(a, b) memcpy(a, b, sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PA cout &lt;&lt; <span class="meta-string">"pass\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x &amp; -x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) x.begin(), x.end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TM cout &lt;&lt; db(clock()) / CLOCKS_PER_SEC &lt;&lt; <span class="meta-string">'\n'</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> x[maxn];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>), <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k)&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; x[i];</span><br><span class="line">            sum ^= x[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum == k) res++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">31</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            sort(x + <span class="number">1</span>, x + n + <span class="number">1</span>, greater&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">            <span class="keyword">int</span> cnt = n;</span><br><span class="line">            <span class="keyword">while</span>(cnt &gt; <span class="number">0</span> &amp;&amp; !(x[cnt] &amp; (<span class="number">1</span> &lt;&lt; i))) cnt--;</span><br><span class="line">            <span class="keyword">if</span>(k &amp; (<span class="number">1</span> &lt;&lt; i) &amp;&amp; cnt == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span>(!cnt) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> tmp = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = cnt + <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">                tmp = <span class="number">1l</span>l * tmp * (x[i] + <span class="number">1</span>) % mod;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            mem(dp);</span><br><span class="line">            dp[<span class="number">0</span>][<span class="number">0</span>] = tmp;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt; j++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> p = <span class="number">0</span>; p &lt;= j; p++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(j == p) dp[j + <span class="number">1</span>][p] = (dp[j + <span class="number">1</span>][p] + dp[j][p]) % mod;</span><br><span class="line">                    <span class="keyword">else</span> dp[j + <span class="number">1</span>][p] = (dp[j + <span class="number">1</span>][p] + <span class="number">1l</span>l * dp[j][p] * (<span class="number">1</span> &lt;&lt; i)) % mod;</span><br><span class="line">                    dp[j + <span class="number">1</span>][p + <span class="number">1</span>] = (dp[j + <span class="number">1</span>][p + <span class="number">1</span>] + <span class="number">1l</span>l * dp[j][p] * (x[j + <span class="number">1</span>] - (<span class="number">1</span> &lt;&lt; i) + <span class="number">1</span>)) % mod;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">bool</span> f = k &amp; (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = f; j &lt; cnt; j += <span class="number">2</span>)&#123;</span><br><span class="line">                res = (res + dp[cnt][j]) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>((cnt &amp; <span class="number">1</span>) != f) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cnt; j++) x[j] -= <span class="number">1</span> &lt;&lt; i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接：&lt;a href=&quot;https://ac.nowcoder.com/acm/contest/4010/B&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://ac.nowcoder.com/acm/contest/4010/B&lt;/a&gt;&lt;br&gt;思路：考虑从高到低位枚举，假设前面都贴着边界，那么该位所有本来上限为0的地方只能填0，上限为1的地方可以填0和1，我们发现如果填0，其他位可以按满足限制随便填，这样这一位一定能确定一个唯一解。如果有多个填0，那么有一个用来确定唯一解，其他都可以随便填。如果填1，后面可以按限制随便填，那么这里的这个过程我们可以用dp来计数。考虑如果所有的本来为1的位置都填了1，就得枚举下一位了，发现是一个子问题，同样方法计算即可。最后把和k在这一位奇偶相同的地方求和就是答案。&lt;br&gt;
    
    </summary>
    
      <category term="基础dp" scheme="http://yoursite.com/categories/%E5%9F%BA%E7%A1%80dp/"/>
    
    
  </entry>
  
  <entry>
    <title>2019 ICPC Asia Xuzhou Regional-I(Interesting game)</title>
    <link href="http://yoursite.com/2019/12/14/2019-ICPC-Asia-Xuzhou-Regional-I-Interesting-game/"/>
    <id>http://yoursite.com/2019/12/14/2019-ICPC-Asia-Xuzhou-Regional-I-Interesting-game/</id>
    <published>2019-12-14T14:56:10.000Z</published>
    <updated>2019-12-14T14:59:33.920Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://nanti.jisuanke.com/t/42548" target="_blank" rel="noopener">https://nanti.jisuanke.com/t/42548</a><br>思路：注意到这么三个问题：1、博弈结果最多只跟四个物品有关（a最高两个和b最高两个）。2、如果b想让结果更优，必须要经过删除当前a最大的那个物品的过程，但删除a最大物品不一定会使结果变得更优。3、删除物品多少和最终结果是具有单调性的。<br>所以我们每次都贪心删掉a最大的物品，并且维护这个过程中每次删除后的最小值即可。<br><a id="more"></a><br>代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;ll&gt; vl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;pii&gt; vp;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> db eps = <span class="number">1e-10</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ep emplace</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> copy(a, b) memcpy(a, b, sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PA cout &lt;&lt; <span class="meta-string">"pass\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x &amp; -x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) x.begin(), x.end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TM cout &lt;&lt; db(clock()) / CLOCKS_PER_SEC &lt;&lt; <span class="meta-string">'\n'</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>&lt;pii, greater&lt;pii&gt;&gt; s1, s2;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e5</span> + <span class="number">233</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn], b[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getans</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> a1 = s1.begin(), b1 = s2.begin();</span><br><span class="line">    <span class="keyword">auto</span> a2 = next(a1), b2 = next(b1);</span><br><span class="line">    <span class="keyword">int</span> res = a1-&gt;fi;</span><br><span class="line">    <span class="keyword">if</span>(a1-&gt;se == b1-&gt;se) res -= b2-&gt;fi;</span><br><span class="line">    <span class="keyword">else</span> res -= b1-&gt;fi;</span><br><span class="line">    <span class="keyword">int</span> ans = a[b1-&gt;se] - b2-&gt;fi;</span><br><span class="line">    <span class="keyword">return</span> max(res, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>), <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i] &gt;&gt; b[i];</span><br><span class="line">        s1.ep(a[i], i), s2.ep(b[i], i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> res = inf;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n - <span class="number">2</span>; i++)&#123;</span><br><span class="line">        res = min(res, getans());</span><br><span class="line">        <span class="keyword">int</span> x = s1.begin()-&gt;se;</span><br><span class="line">        s1.erase(pii(a[x], x));</span><br><span class="line">        s2.erase(pii(b[x], x));</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接：&lt;a href=&quot;https://nanti.jisuanke.com/t/42548&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://nanti.jisuanke.com/t/42548&lt;/a&gt;&lt;br&gt;思路：注意到这么三个问题：1、博弈结果最多只跟四个物品有关（a最高两个和b最高两个）。2、如果b想让结果更优，必须要经过删除当前a最大的那个物品的过程，但删除a最大物品不一定会使结果变得更优。3、删除物品多少和最终结果是具有单调性的。&lt;br&gt;所以我们每次都贪心删掉a最大的物品，并且维护这个过程中每次删除后的最小值即可。&lt;br&gt;
    
    </summary>
    
      <category term="贪心" scheme="http://yoursite.com/categories/%E8%B4%AA%E5%BF%83/"/>
    
    
  </entry>
  
  <entry>
    <title>2019 ICPC Asia Xuzhou Regional-H(Yuuki and a problem)</title>
    <link href="http://yoursite.com/2019/12/14/2019-ICPC-Asia-Xuzhou-Regional-H-Yuuki-and-a-problem/"/>
    <id>http://yoursite.com/2019/12/14/2019-ICPC-Asia-Xuzhou-Regional-H-Yuuki-and-a-problem/</id>
    <published>2019-12-14T14:48:53.000Z</published>
    <updated>2019-12-14T15:00:14.258Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://nanti.jisuanke.com/t/42547" target="_blank" rel="noopener">https://nanti.jisuanke.com/t/42547</a><br>思路：一看又是带修改主席树的样子，只是操作二怎么做成了问题，考虑如果当前我们知道now以内的都可以表示，那我们需要查看now + 1处是否有值，如果没有最小不能表示的就是now + 1，否则now = now + now + 1。我们考虑最坏需要枚举的路径，是1，2，4，8，16……发现最多log次就到2e5了，所有我们对于操作2暴力计算就行了，复杂度<script type="math/tex">O(nlog^3n)</script><br><a id="more"></a><br>代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;ll&gt; vl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;pii&gt; vp;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> db eps = <span class="number">1e-10</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ep emplace</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> copy(a, b) memcpy(a, b, sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PA cout &lt;&lt; <span class="meta-string">"pass\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x &amp; -x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) x.begin(), x.end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TM cout &lt;&lt; db(clock()) / CLOCKS_PER_SEC &lt;&lt; <span class="meta-string">'\n'</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> root[maxn], ls[maxn * <span class="number">150</span>], rs[maxn * <span class="number">150</span>];</span><br><span class="line">ll sum[maxn * <span class="number">150</span>];</span><br><span class="line"><span class="keyword">int</span> pl[maxn], pr[maxn];</span><br><span class="line"><span class="keyword">int</span> idx, cnt1, cnt2;</span><br><span class="line"><span class="keyword">int</span> n, q;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> pre, <span class="keyword">int</span> &amp;o, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> p, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!o) o = ++idx;</span><br><span class="line">    ls[o] = ls[pre], rs[o] = rs[pre], sum[o] = sum[pre] + v;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(p &lt;= mid) update(ls[pre], ls[o], l, mid, p, v);</span><br><span class="line">    <span class="keyword">else</span> update(rs[pre], rs[o], mid + <span class="number">1</span>, r, p, v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    ll x = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(l == r) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt1; i++) x -= sum[pl[i]];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt2; i++) x += sum[pr[i]];</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(k &lt;= mid) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt1; i++) pl[i] = ls[pl[i]];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt2; i++) pr[i] = ls[pr[i]];</span><br><span class="line">        <span class="keyword">return</span> query(l, mid, k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt1; i++) x -= sum[ls[pl[i]]];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt2; i++) x += sum[ls[pr[i]]];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt1; i++) pl[i] = rs[pl[i]];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt2; i++) pr[i] = rs[pr[i]];</span><br><span class="line">    <span class="keyword">return</span> x + query(mid + <span class="number">1</span>, r, k);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = p; i &lt;= maxn; i += lowbit(i)) update(root[i], root[i], <span class="number">1</span>, maxn, a[p], d);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">prequery</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">    cnt1 = cnt2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = l; i; i -= lowbit(i)) pl[++cnt1] = root[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = r; i; i -= lowbit(i)) pr[++cnt2] = root[i];</span><br><span class="line">    <span class="keyword">return</span> query(<span class="number">1</span>, maxn, p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">        add(i, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">        <span class="keyword">int</span> op, x, y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;op, &amp;x, &amp;y);</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">1</span>)&#123;</span><br><span class="line">            add(x, -a[x]);</span><br><span class="line">            a[x] = y;</span><br><span class="line">            add(x, a[x]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            ll now = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">                ll tmp = prequery(x - <span class="number">1</span>, y, now);</span><br><span class="line">                <span class="keyword">if</span>(tmp &lt; now)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(tmp &gt; maxn)&#123;</span><br><span class="line">                    now = prequery(x - <span class="number">1</span>, y, maxn) + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                now = tmp + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, now);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接：&lt;a href=&quot;https://nanti.jisuanke.com/t/42547&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://nanti.jisuanke.com/t/42547&lt;/a&gt;&lt;br&gt;思路：一看又是带修改主席树的样子，只是操作二怎么做成了问题，考虑如果当前我们知道now以内的都可以表示，那我们需要查看now + 1处是否有值，如果没有最小不能表示的就是now + 1，否则now = now + now + 1。我们考虑最坏需要枚举的路径，是1，2，4，8，16……发现最多log次就到2e5了，所有我们对于操作2暴力计算就行了，复杂度&lt;script type=&quot;math/tex&quot;&gt;O(nlog^3n)&lt;/script&gt;&lt;br&gt;
    
    </summary>
    
      <category term="树套树" scheme="http://yoursite.com/categories/%E6%A0%91%E5%A5%97%E6%A0%91/"/>
    
    
  </entry>
  
  <entry>
    <title>2019 ICPC Asia Nanjing Onsite-I(Space Station)</title>
    <link href="http://yoursite.com/2019/12/14/2019-ICPC-Asia-Nanjing-Onsite-I-Space-Station/"/>
    <id>http://yoursite.com/2019/12/14/2019-ICPC-Asia-Nanjing-Onsite-I-Space-Station/</id>
    <published>2019-12-14T14:40:28.000Z</published>
    <updated>2019-12-14T14:46:31.530Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://codeforces.com/gym/257756/problem/I" target="_blank" rel="noopener">https://codeforces.com/gym/257756/problem/I</a><br>思路：分析发现当总和大于等于最大的数后就可以任意选了，我们只需要考虑如下情况：最后一次小于最大max值，且下一个选了后大雨等于最大的max值。打表发现50以内划分数的总和在2e6左右，对于每一种划分方案，我们用个map记录一下，并枚举一下符合条件的下一个数选什么，如果选了后大于max，我们计入答案内，否则将贡献转移到另一个方案里。最后所有大于等于mx和一定都被统计过了，即可得到最终的答案。<br><a id="more"></a><br>代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;ll&gt; vl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;pii&gt; vp;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> db eps = <span class="number">1e-10</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ep emplace</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> copy(a, b) memcpy(a, b, sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PA cout &lt;&lt; <span class="meta-string">"pass\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x &amp; -x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) x.begin(), x.end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TM cout &lt;&lt; db(clock()) / CLOCKS_PER_SEC &lt;&lt; <span class="meta-string">'\n'</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;vi, <span class="keyword">int</span>&gt; dp;</span><br><span class="line"><span class="keyword">int</span> res;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">233</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">55</span>], cnt[<span class="number">55</span>], b[maxn], n, mx;</span><br><span class="line"><span class="keyword">int</span> fac[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    x += y;</span><br><span class="line">    <span class="keyword">if</span>(x &gt;= mod) x -= mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> sum)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(sum &gt;= mx)&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        vi t;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= mx; i++) &#123;</span><br><span class="line">            t.eb(a[i]), num += cnt[i] - a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        add(res, <span class="number">1l</span>l * dp[t] * fac[num] % mod);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(now &gt; mx)&#123;</span><br><span class="line">        vi t;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= mx; i++) &#123;</span><br><span class="line">            t.eb(a[i]), num += cnt[i] - a[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> x = dp[t];</span><br><span class="line">        <span class="keyword">if</span>(!x) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= mx &amp;&amp; i &lt;= sum; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cnt[i] &gt; a[i]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (sum + i &gt;= mx) &#123;</span><br><span class="line">                    add(res, <span class="number">1l</span>l * x * (cnt[i] - a[i]) % mod * fac[num - <span class="number">1</span>] % mod);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    t[i - <span class="number">1</span>]++;</span><br><span class="line">                    add(dp[t], <span class="number">1l</span>l * x * (cnt[i] - a[i]) % mod);</span><br><span class="line">                    t[i - <span class="number">1</span>]--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= cnt[now] &amp;&amp; sum + i * now &lt;= mx; i++) &#123;</span><br><span class="line">        a[now] = i;</span><br><span class="line">        dfs(now + <span class="number">1</span>, sum + i * now);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>), <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;b[i]);</span><br><span class="line">        cnt[b[i]]++;</span><br><span class="line">        mx = max(mx, b[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; maxn; i++) fac[i] = <span class="number">1l</span>l * fac[i - <span class="number">1</span>] * i % mod;</span><br><span class="line">    vi t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= mx; i++) t.eb(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(b[<span class="number">0</span>] == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(cnt[<span class="number">0</span>] == n + <span class="number">1</span>) res = fac[n];</span><br><span class="line">        <span class="keyword">else</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    t[b[<span class="number">0</span>] - <span class="number">1</span>]++;</span><br><span class="line"></span><br><span class="line">    dp[t] = <span class="number">1</span>;</span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n - cnt[<span class="number">0</span>] + <span class="number">1</span>; i &lt;= n; i++) res = <span class="number">1l</span>l * res * i % mod;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接：&lt;a href=&quot;https://codeforces.com/gym/257756/problem/I&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://codeforces.com/gym/257756/problem/I&lt;/a&gt;&lt;br&gt;思路：分析发现当总和大于等于最大的数后就可以任意选了，我们只需要考虑如下情况：最后一次小于最大max值，且下一个选了后大雨等于最大的max值。打表发现50以内划分数的总和在2e6左右，对于每一种划分方案，我们用个map记录一下，并枚举一下符合条件的下一个数选什么，如果选了后大于max，我们计入答案内，否则将贡献转移到另一个方案里。最后所有大于等于mx和一定都被统计过了，即可得到最终的答案。&lt;br&gt;
    
    </summary>
    
      <category term="暴力" scheme="http://yoursite.com/categories/%E6%9A%B4%E5%8A%9B/"/>
    
    
  </entry>
  
  <entry>
    <title>2019 ICPC Asia Nanjing Onsite-F(Paper Grading)</title>
    <link href="http://yoursite.com/2019/12/14/2019-ICPC-Asia-Nanjing-Onsite-F-Paper-Grading/"/>
    <id>http://yoursite.com/2019/12/14/2019-ICPC-Asia-Nanjing-Onsite-F-Paper-Grading/</id>
    <published>2019-12-14T14:36:11.000Z</published>
    <updated>2020-01-26T15:58:02.150Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://codeforces.com/gym/257756/problem/F" target="_blank" rel="noopener">https://codeforces.com/gym/257756/problem/F</a><br>思路：将问题转换到trie上，即变为询问一个点，求其子树内在l - r范围的值有多少个，并且支持单点修改。范围个数统计很容易想到主席树，单点修改即在主席树外面套一个bit即可。注意本题把所有串在trie上结束位置记录下来，不然操作2复杂度就不对了。<br><a id="more"></a><br>代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;ll&gt; vl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;pii&gt; vp;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> db eps = <span class="number">1e-10</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ep emplace</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> copy(a, b) memcpy(a, b, sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PA cout &lt;&lt; <span class="meta-string">"pass\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x &amp; -x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) x.begin(), x.end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TM cout &lt;&lt; db(clock()) / CLOCKS_PER_SEC &lt;&lt; <span class="meta-string">'\n'</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> root[maxn], ls[maxn * <span class="number">200</span>], rs[maxn * <span class="number">200</span>], sum[maxn * <span class="number">200</span>], pl[maxn], pr[maxn];</span><br><span class="line"><span class="keyword">int</span> idx, cnt1, cnt2;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; s[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> now[maxn];</span><br><span class="line"><span class="keyword">int</span> ch[maxn][<span class="number">26</span>];</span><br><span class="line"><span class="keyword">int</span> sz;</span><br><span class="line"><span class="keyword">int</span> in[maxn], out[maxn], dfs_clock;</span><br><span class="line"><span class="keyword">int</span> pos[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    sz = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">memset</span>(ch[<span class="number">0</span>],<span class="number">0</span>,<span class="keyword">sizeof</span>(ch[<span class="number">0</span>]));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> p;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> c = s[i] - <span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">if</span> (!ch[u][c]) &#123;</span><br><span class="line">            <span class="built_in">memset</span>(ch[sz], <span class="number">0</span>, <span class="keyword">sizeof</span>(ch[sz]));</span><br><span class="line">            ch[u][c] = sz++;</span><br><span class="line">        &#125;</span><br><span class="line">        u = ch[u][c];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    in[u] = ++dfs_clock;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch[u][i]) dfs(ch[u][i]);</span><br><span class="line">    &#125;</span><br><span class="line">    out[u] = dfs_clock;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> pre, <span class="keyword">int</span> &amp;o, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> p, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    o = ++idx;</span><br><span class="line">    ls[o] = ls[pre], rs[o] = rs[pre], sum[o] = sum[pre] + v;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(p &lt;= mid) update(ls[pre], ls[o], l, mid, p, v);</span><br><span class="line">    <span class="keyword">else</span> update(rs[pre], rs[o], mid + <span class="number">1</span>, r, p, v);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt1; i++) x -= sum[pl[i]];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt2; i++) x += sum[pr[i]];</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>, x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt1; i++) x -= sum[ls[pl[i]]];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt2; i++) x += sum[ls[pr[i]]];</span><br><span class="line">    <span class="keyword">if</span>(k &gt; mid) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt1; i++) pl[i] = rs[pl[i]];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt2; i++) pr[i] = rs[pr[i]];</span><br><span class="line">        <span class="keyword">return</span> x + query(mid + <span class="number">1</span>, r, k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt1; i++) pl[i] = ls[pl[i]];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt2; i++) pr[i] = ls[pr[i]];</span><br><span class="line">    <span class="keyword">return</span> query(l, mid, k);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> p, <span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = x; i &lt;= dfs_clock; i += lowbit(i)) update(root[i], root[i], <span class="number">0</span>, n, p, d);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">querypre</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span>&#123;</span><br><span class="line">    cnt1 = cnt2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = L; i; i -= lowbit(i)) pl[++cnt1] = root[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = R; i; i -= lowbit(i)) pr[++cnt2] = root[i];</span><br><span class="line">    <span class="keyword">int</span> s = query(<span class="number">0</span>, n, r);</span><br><span class="line">    cnt1 = <span class="number">0</span>;</span><br><span class="line">    cnt2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = L; i; i -= lowbit(i)) pl[++cnt1] = root[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = R; i; i -= lowbit(i)) pr[++cnt2] = root[i];</span><br><span class="line">    <span class="keyword">return</span> s - query(<span class="number">0</span>, n, l - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> X = <span class="number">0</span>, w = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) &#123;</span><br><span class="line">        w |= ch == <span class="string">'-'</span>;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) X = (X &lt;&lt; <span class="number">3</span>) + (X &lt;&lt; <span class="number">1</span>) + (ch ^ <span class="number">48</span>), ch = getchar();</span><br><span class="line">    <span class="keyword">return</span> w ? -X : X;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>) write(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">char</span> tmp[maxn];</span><br><span class="line"><span class="keyword">int</span> len[maxn];</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    n = read(), m = read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, tmp);</span><br><span class="line">        len[i] = <span class="built_in">strlen</span>(tmp);</span><br><span class="line">        p = len[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len[i]; j++) s[i].eb(tmp[j]);</span><br><span class="line">        insert(tmp);</span><br><span class="line">        now[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    dfs(<span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; s[i].size(); j++) u = ch[u][s[i][j] - <span class="string">'a'</span>];</span><br><span class="line">        pos[i] = u;</span><br><span class="line">        add(in[u], i, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> op, l, r, k;</span><br><span class="line">        op = read();</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, tmp);</span><br><span class="line">            k = read();</span><br><span class="line">            l = read();</span><br><span class="line">            r = read();</span><br><span class="line">            <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">bool</span> f = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!ch[u][tmp[j] - <span class="string">'a'</span>])&#123;</span><br><span class="line">                    f = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                u = ch[u][tmp[j] - <span class="string">'a'</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!f) <span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">            <span class="keyword">else</span> write(querypre(l, r, in[u] - <span class="number">1</span>, out[u])), <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            l = read();</span><br><span class="line">            r = read();</span><br><span class="line">            <span class="keyword">if</span>(l == r) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">int</span> u = pos[now[l]];</span><br><span class="line">            add(in[u], l, <span class="number">-1</span>);</span><br><span class="line">            add(in[u], r, <span class="number">1</span>);</span><br><span class="line">            u = pos[now[r]];</span><br><span class="line">            add(in[u], r, <span class="number">-1</span>);</span><br><span class="line">            add(in[u], l, <span class="number">1</span>);</span><br><span class="line">            swap(now[l], now[r]);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>补一个cdq的做法，考虑第一维是时间t，按照操作顺序默认排好序了，第二维是dfs序，第三维是字符串的下标，将第一维时间线看成修改操作，那么就是一个典型的带修改二维数点问题，直接套用cdq分治即可。<br>代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;ll&gt; vl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;pii&gt; vp;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> db eps = <span class="number">1e-10</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ep emplace</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> copy(a, b) memcpy(a, b, sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PA cout &lt;&lt; <span class="meta-string">"pass\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x &amp; -x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) x.begin(), x.end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TM cout &lt;&lt; db(clock()) / CLOCKS_PER_SEC &lt;&lt; <span class="meta-string">'\n'</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">233</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> sigma_size = <span class="number">26</span>;</span><br><span class="line"><span class="keyword">int</span> ch[maxn][sigma_size], sz, dfs_clock;</span><br><span class="line"><span class="keyword">int</span> val[maxn], in[maxn], out[maxn], pos[maxn];</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sz = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">memset</span>(ch[<span class="number">0</span>], <span class="number">0</span>, <span class="keyword">sizeof</span>(ch[<span class="number">0</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">idx</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> c - <span class="string">'a'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> v = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">    <span class="keyword">int</span> n = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> c = idx(s[i]);</span><br><span class="line">        <span class="keyword">if</span> (!ch[u][c]) &#123;</span><br><span class="line">            ch[u][c] = sz;</span><br><span class="line">            <span class="built_in">memset</span>(ch[sz], <span class="number">0</span>, <span class="keyword">sizeof</span>(ch[sz]));</span><br><span class="line">            val[sz++] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        u = ch[u][c];</span><br><span class="line">    &#125;</span><br><span class="line">    val[u] = v;</span><br><span class="line">    pos[v] = u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    in[u] = ++dfs_clock;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sigma_size; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch[u][i]) dfs(ch[u][i]);</span><br><span class="line">    &#125;</span><br><span class="line">    out[u] = dfs_clock;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> op, x, y, c, id;</span><br><span class="line">&#125;a[maxn * <span class="number">5</span>], tmp[maxn * <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">char</span> str[maxn];</span><br><span class="line"><span class="keyword">int</span> res[maxn];</span><br><span class="line"><span class="keyword">int</span> c[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x &lt; maxn)&#123;</span><br><span class="line">        c[x] += d;</span><br><span class="line">        x += lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">        ret += c[x];</span><br><span class="line">        x -= lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cdq</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    cdq(l, mid);</span><br><span class="line">    cdq(mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="keyword">int</span> pl = l, pr = mid + <span class="number">1</span>, tot = l;</span><br><span class="line">    <span class="keyword">while</span>(pl &lt;= mid &amp;&amp; pr &lt;= r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[pl].x &lt;= a[pr].x)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!a[pl].op) add(a[pl].y, a[pl].c);</span><br><span class="line">            tmp[tot++] = a[pl++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[pr].op) res[a[pr].id] += a[pr].c * query(a[pr].y);</span><br><span class="line">            tmp[tot++] = a[pr++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(pl &lt;= mid) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!a[pl].op) add(a[pl].y, a[pl].c);</span><br><span class="line">        tmp[tot++] = a[pl++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(pr &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[pr].op) res[a[pr].id] += a[pr].c * query(a[pr].y);</span><br><span class="line">        tmp[tot++] = a[pr++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = l; i &lt;= mid; i++) <span class="keyword">if</span>(!a[i].op) add(a[i].y, -a[i].c);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = l; i &lt;= r; i++) a[i] = tmp[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> ok[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        insert(i);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        a[++cnt] = node&#123;<span class="number">0</span>, in[pos[i]], i, <span class="number">1</span>, i&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> op, k, l, r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;op);</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;l, &amp;r);</span><br><span class="line">            a[++cnt] = node&#123;<span class="number">0</span>, in[pos[l]], l, <span class="number">-1</span>, i&#125;;</span><br><span class="line">            a[++cnt] = node&#123;<span class="number">0</span>, in[pos[r]], r, <span class="number">-1</span>, i&#125;;</span><br><span class="line">            a[++cnt] = node&#123;<span class="number">0</span>, in[pos[l]], r, <span class="number">1</span>, i&#125;;</span><br><span class="line">            a[++cnt] = node&#123;<span class="number">0</span>, in[pos[r]], l, <span class="number">1</span>, i&#125;;</span><br><span class="line">            swap(pos[l], pos[r]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            ok[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s %d %d %d"</span>, str, &amp;k, &amp;l, &amp;r);</span><br><span class="line">            <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">bool</span> f = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k; j++)&#123;</span><br><span class="line">                <span class="keyword">int</span> c = str[j] - <span class="string">'a'</span>;</span><br><span class="line">                <span class="keyword">if</span>(ch[p][c]) p = ch[p][c];</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    f = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!f) <span class="keyword">continue</span>;</span><br><span class="line">            a[++cnt] = &#123;<span class="number">1</span>, in[p] - <span class="number">1</span>, l - <span class="number">1</span>, <span class="number">1</span>, i&#125;;</span><br><span class="line">            a[++cnt] = &#123;<span class="number">1</span>, in[p] - <span class="number">1</span>, r, <span class="number">-1</span>, i&#125;;</span><br><span class="line">            a[++cnt] = &#123;<span class="number">1</span>, out[p], l - <span class="number">1</span>, <span class="number">-1</span>, i&#125;;</span><br><span class="line">            a[++cnt] = &#123;<span class="number">1</span>, out[p], r, <span class="number">1</span>, i&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cdq(<span class="number">1</span>, cnt);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ok[i]) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, res[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接：&lt;a href=&quot;https://codeforces.com/gym/257756/problem/F&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://codeforces.com/gym/257756/problem/F&lt;/a&gt;&lt;br&gt;思路：将问题转换到trie上，即变为询问一个点，求其子树内在l - r范围的值有多少个，并且支持单点修改。范围个数统计很容易想到主席树，单点修改即在主席树外面套一个bit即可。注意本题把所有串在trie上结束位置记录下来，不然操作2复杂度就不对了。&lt;br&gt;
    
    </summary>
    
      <category term="树套树" scheme="http://yoursite.com/categories/%E6%A0%91%E5%A5%97%E6%A0%91/"/>
    
    
  </entry>
  
  <entry>
    <title>2019 ICPC Asia Nanchang Onsite-A(9102)</title>
    <link href="http://yoursite.com/2019/12/08/2019-ICPC-Asia-Nanchang-Onsite-A-9102/"/>
    <id>http://yoursite.com/2019/12/08/2019-ICPC-Asia-Nanchang-Onsite-A-9102/</id>
    <published>2019-12-08T08:46:20.000Z</published>
    <updated>2019-12-12T13:44:07.699Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://codeforces.com/gym/259514/problem/A" target="_blank" rel="noopener">https://codeforces.com/gym/259514/problem/A</a><br>思路：题目里透着一股浓浓的可持久化并查集的味道，然而仔细看看并不用，可以按照询问建树，然后树上dfs，进去的时候加上某个操作或者回答询问，出来的时候撤销掉之前的操作即可。操作1简单的按秩合并，撤销就还原rank数组和father即可。操作2用个数组标记一下是否已经毁掉即可。操作三如果正常做可能有些问题，涉及到把一个点所有的儿子都挂到他父亲下面，删掉这个点并且放到另一个点的祖先下去，复杂度不太好证明且写着非常繁琐。事实上可以开一个新点，原来那个点指向新点，新点挂到新位置下即可，同时改变对应的统计信息。操作4和5就是正常的询问，没什么难度，就是注意一下细节就好，比如已经有某个family毁掉了操作就不再进行，并且询问就输出No/0等。<br><a id="more"></a><br>代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;ll&gt; vl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;pii&gt; vp;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> db eps = <span class="number">1e-10</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ep emplace</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> copy(a, b) memcpy(a, b, sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PA cout &lt;&lt; <span class="meta-string">"pass\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x &amp; -x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) x.begin(), x.end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TM cout &lt;&lt; db(clock()) / CLOCKS_PER_SEC &lt;&lt; <span class="meta-string">'\n'</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">233</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> f[<span class="number">2</span> * maxn], n, m;</span><br><span class="line"><span class="keyword">int</span> cnt[<span class="number">2</span> * maxn], op[maxn], id[<span class="number">2</span> * maxn], num[<span class="number">2</span> * maxn], sz;</span><br><span class="line">vi G[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">2</span> * maxn];</span><br><span class="line"><span class="keyword">int</span> res[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x == f[x] ? x : find(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ASK</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">&#125;q[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p1, p2, p3;</span><br><span class="line">    <span class="keyword">bool</span> ok = <span class="literal">false</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(op[u] == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> fx = find(id[q[u].a]);</span><br><span class="line">        <span class="keyword">int</span> fy = find(id[q[u].b]);</span><br><span class="line">        <span class="keyword">if</span>(fx != fy &amp;&amp; vis[q[u].a] &amp;&amp; vis[q[u].b])&#123;</span><br><span class="line">            ok = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(cnt[fx] &lt; cnt[fy]) swap(fx, fy);</span><br><span class="line">            f[fy] = fx;</span><br><span class="line">            p3 = fx;</span><br><span class="line">            p2 = fy;</span><br><span class="line">            p1 = cnt[fx];</span><br><span class="line">            cnt[fx] = max(cnt[fx], cnt[fy] + <span class="number">1</span>);</span><br><span class="line">            num[fx] += num[fy];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(op[u] == <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = id[q[u].a];</span><br><span class="line">        <span class="keyword">if</span>(vis[q[u].a]) &#123;</span><br><span class="line">            ok = <span class="literal">true</span>;</span><br><span class="line">            vis[q[u].a] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> fx = find(tmp);</span><br><span class="line">            num[fx]--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(op[u] == <span class="number">3</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = id[q[u].a];</span><br><span class="line">        <span class="keyword">int</span> fx = find(id[q[u].a]);</span><br><span class="line">        <span class="keyword">int</span> fy = find(id[q[u].b]);</span><br><span class="line">        <span class="keyword">if</span>(fx != fy &amp;&amp; vis[q[u].a] &amp;&amp; vis[q[u].b])&#123;</span><br><span class="line">            ok = <span class="literal">true</span>;</span><br><span class="line">            id[q[u].a] = ++sz;</span><br><span class="line">            id[sz] = sz;</span><br><span class="line">            vis[sz] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> np = find(id[q[u].b]);</span><br><span class="line">            p3 = tmp;</span><br><span class="line">            p2 = np;</span><br><span class="line">            f[sz] = np;</span><br><span class="line">            num[np]++;</span><br><span class="line">            np = find(tmp);</span><br><span class="line">            num[np]--;</span><br><span class="line">            p1 = np;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(op[u] == <span class="number">4</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> fx = find(id[q[u].a]);</span><br><span class="line">        <span class="keyword">int</span> fy = find(id[q[u].b]);</span><br><span class="line">        <span class="keyword">if</span>(vis[q[u].a] &amp;&amp; vis[q[u].b]) res[u] = (fx == fy);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(op[u] == <span class="number">5</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(vis[q[u].a])</span><br><span class="line">        res[u] = num[find(id[q[u].a])];</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;v : G[u])&#123;</span><br><span class="line">        dfs(v);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(op[u] == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ok) &#123;</span><br><span class="line">            cnt[p3] = p1;</span><br><span class="line">            f[p2] = p2;</span><br><span class="line">            num[p3] -= num[p2];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(op[u] == <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = id[q[u].a];</span><br><span class="line">        <span class="keyword">if</span>(ok)&#123;</span><br><span class="line">            vis[q[u].a] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> fx = find(tmp);</span><br><span class="line">            num[fx]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(op[u] == <span class="number">3</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = id[q[u].a];</span><br><span class="line">        <span class="keyword">if</span>(ok)&#123;</span><br><span class="line">            id[q[u].a] = tmp;</span><br><span class="line">            num[p1]++;</span><br><span class="line">            num[p2]--;</span><br><span class="line">            id[q[u].a] = p3;</span><br><span class="line">            vis[sz] = <span class="number">0</span>;</span><br><span class="line">            sz--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) f[i] = i, cnt[i] = <span class="number">1</span>, vis[i] = <span class="number">1</span>, num[i] = <span class="number">1</span>, id[i] = i;</span><br><span class="line">    sz = n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> u;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;op[i], &amp;u, &amp;q[i].a);</span><br><span class="line">        G[u].eb(i);</span><br><span class="line">        <span class="keyword">if</span>(op[i] == <span class="number">1</span> || op[i] == <span class="number">3</span> || op[i] == <span class="number">4</span>) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q[i].b);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(op[i] == <span class="number">4</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(res[i]) <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op[i] == <span class="number">5</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, res[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接：&lt;a href=&quot;https://codeforces.com/gym/259514/problem/A&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://codeforces.com/gym/259514/problem/A&lt;/a&gt;&lt;br&gt;思路：题目里透着一股浓浓的可持久化并查集的味道，然而仔细看看并不用，可以按照询问建树，然后树上dfs，进去的时候加上某个操作或者回答询问，出来的时候撤销掉之前的操作即可。操作1简单的按秩合并，撤销就还原rank数组和father即可。操作2用个数组标记一下是否已经毁掉即可。操作三如果正常做可能有些问题，涉及到把一个点所有的儿子都挂到他父亲下面，删掉这个点并且放到另一个点的祖先下去，复杂度不太好证明且写着非常繁琐。事实上可以开一个新点，原来那个点指向新点，新点挂到新位置下即可，同时改变对应的统计信息。操作4和5就是正常的询问，没什么难度，就是注意一下细节就好，比如已经有某个family毁掉了操作就不再进行，并且询问就输出No/0等。&lt;br&gt;
    
    </summary>
    
      <category term="并查集" scheme="http://yoursite.com/categories/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
    
  </entry>
  
  <entry>
    <title>2019 ICPC Asia Nanchang Onsite-M(XOR Sum)</title>
    <link href="http://yoursite.com/2019/12/08/2019-ICPC-Asia-Nanchang-Onsite-M-XOR-Sum/"/>
    <id>http://yoursite.com/2019/12/08/2019-ICPC-Asia-Nanchang-Onsite-M-XOR-Sum/</id>
    <published>2019-12-08T08:32:19.000Z</published>
    <updated>2019-12-08T08:44:56.531Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://codeforces.com/gym/259514/problem/M" target="_blank" rel="noopener">https://codeforces.com/gym/259514/problem/M</a><br>思路：首先观察异或的前缀和跟4的余数有关：f(i) = i (i % 4 == 0), f(i) = 1 (i % 4 == 1), f(i) = i + 1 (i % 4 == 2), f(i) = 0 (i % 4 == 3)，然后我们变换一下公式求和顺序。</p><script type="math/tex; mode=display">\sum_{i = x}^y\sum_{k = 1}^tf(i, k)</script><p>里面按4余数分类进行求和，发现余1和余3都是常数，余2多一个常数1，我们把2的倍数拉出来讨论，发现是一个等比数列求和。<br>考虑没有外面那一层求和，里面2的倍数的项显然是一个k次多项式。再对所有2的部分求前缀和，那么应该是一个t + 1次多项式（从生成函数的角度去看幂次可能更清楚一点，简而言之就是求一次前缀和次数增加一次）。那么我们用1 - t + 2个偶点去插值，求出所有2倍数项的等比数列的前缀和，其他项分类讨论即可得出答案。（注意插值板子，里面分母上不能直接乘了后再乘逆元，因为数比模数大，可能刚好是模数的倍数就取模等于0了，得搞个靠谱板子）。<br><a id="more"></a><br>代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;ll&gt; vl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;pii&gt; vp;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> db eps = <span class="number">1e-10</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ep emplace</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> copy(a, b) memcpy(a, b, sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PA cout &lt;&lt; <span class="meta-string">"pass\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x &amp; -x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) x.begin(), x.end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TM cout &lt;&lt; db(clock()) / CLOCKS_PER_SEC &lt;&lt; <span class="meta-string">'\n'</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pow_mod</span><span class="params">(ll q, ll w)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    q %= mod;</span><br><span class="line">    <span class="keyword">while</span>(w)&#123;</span><br><span class="line">        <span class="keyword">if</span>(w &amp; <span class="number">1</span>) ret = <span class="number">1l</span>l * ret * q % mod;</span><br><span class="line">        q = <span class="number">1l</span>l * q * q  % mod;</span><br><span class="line">        w &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">233</span>;</span><br><span class="line"><span class="keyword">int</span> fac[maxn], inv[maxn];</span><br><span class="line"><span class="keyword">int</span> x[maxn], y[maxn];</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line">ll l, r;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1l</span>l * (mod + <span class="number">1</span> - pow_mod(n, t + <span class="number">1</span>)) * pow_mod(mod + <span class="number">1</span> - n, mod - <span class="number">2</span>) % mod + mod - <span class="number">1</span>) % mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> d1[maxn], d2[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getans</span><span class="params">(ll n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt;= t + <span class="number">2</span>) <span class="keyword">return</span> y[n];</span><br><span class="line">    d1[<span class="number">0</span>] = d2[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= t + <span class="number">2</span>; i++) &#123;</span><br><span class="line">        d1[i] = <span class="number">1l</span>l * d1[i - <span class="number">1</span>] * ((n - i) % mod) % mod;</span><br><span class="line">        d2[i] = <span class="number">1l</span>l * d2[i - <span class="number">1</span>]  * ((n - t - <span class="number">2</span> + i - <span class="number">1</span>) % mod) % mod;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= t + <span class="number">2</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">1l</span>l * d1[i - <span class="number">1</span>] * d2[t + <span class="number">2</span> - i] % mod * y[i] % mod;</span><br><span class="line">        ans = <span class="number">1l</span>l * ans * inv[i - <span class="number">1</span>] % mod * inv[t + <span class="number">2</span> - i] % mod;</span><br><span class="line">        <span class="keyword">if</span>((t + <span class="number">2</span> - i) &amp; <span class="number">1</span>) ans = (mod - ans) % mod;</span><br><span class="line">        res = (res + ans) % mod;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(ll n)</span></span>&#123;</span><br><span class="line">    ll k = n / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> res = getans(k);</span><br><span class="line">    res = (res + <span class="number">1l</span>l * (n / <span class="number">4</span> % mod) * (t + t / <span class="number">2</span> + <span class="number">1</span>)) % mod;</span><br><span class="line">    <span class="keyword">if</span>(n % <span class="number">4</span> == <span class="number">1</span>) res = (res + t) % mod;</span><br><span class="line">    <span class="keyword">if</span>(n % <span class="number">4</span> == <span class="number">2</span>) res = (res + t + <span class="number">1</span>) % mod;</span><br><span class="line">    <span class="keyword">if</span>(n % <span class="number">4</span> == <span class="number">3</span>) res = (res + t + t / <span class="number">2</span> + <span class="number">1</span>) % mod;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>), <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t &gt;&gt; l &gt;&gt; r;</span><br><span class="line">    fac[<span class="number">0</span>] = inv[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; maxn; i++) fac[i] = <span class="number">1l</span>l * fac[i - <span class="number">1</span>] * i % mod;</span><br><span class="line">    inv[maxn - <span class="number">1</span>] = pow_mod(fac[maxn - <span class="number">1</span>], mod - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = maxn - <span class="number">2</span>; i; i--) inv[i] = <span class="number">1l</span>l * inv[i + <span class="number">1</span>] * (i + <span class="number">1</span>) % mod;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= t + <span class="number">2</span>; i++)&#123;</span><br><span class="line">        x[i] = i;</span><br><span class="line">        <span class="keyword">int</span> tmp = get(<span class="number">2</span> * i);</span><br><span class="line">        y[i] = (y[i - <span class="number">1</span>] + tmp) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (solve(r) - solve(l - <span class="number">1</span>) + mod) % mod &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接：&lt;a href=&quot;https://codeforces.com/gym/259514/problem/M&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://codeforces.com/gym/259514/problem/M&lt;/a&gt;&lt;br&gt;思路：首先观察异或的前缀和跟4的余数有关：f(i) = i (i % 4 == 0), f(i) = 1 (i % 4 == 1), f(i) = i + 1 (i % 4 == 2), f(i) = 0 (i % 4 == 3)，然后我们变换一下公式求和顺序。&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\sum_{i = x}^y\sum_{k = 1}^tf(i, k)&lt;/script&gt;&lt;p&gt;里面按4余数分类进行求和，发现余1和余3都是常数，余2多一个常数1，我们把2的倍数拉出来讨论，发现是一个等比数列求和。&lt;br&gt;考虑没有外面那一层求和，里面2的倍数的项显然是一个k次多项式。再对所有2的部分求前缀和，那么应该是一个t + 1次多项式（从生成函数的角度去看幂次可能更清楚一点，简而言之就是求一次前缀和次数增加一次）。那么我们用1 - t + 2个偶点去插值，求出所有2倍数项的等比数列的前缀和，其他项分类讨论即可得出答案。（注意插值板子，里面分母上不能直接乘了后再乘逆元，因为数比模数大，可能刚好是模数的倍数就取模等于0了，得搞个靠谱板子）。&lt;br&gt;
    
    </summary>
    
      <category term="拉格朗日插值法" scheme="http://yoursite.com/categories/%E6%8B%89%E6%A0%BC%E6%9C%97%E6%97%A5%E6%8F%92%E5%80%BC%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>2019 ICPC Asia Nanchang Onsite-F(Dynamic Suffix Array)</title>
    <link href="http://yoursite.com/2019/12/08/2019-ICPC-Asia-Nanchang-Onsite-F-Dynamic-Suffix-Array/"/>
    <id>http://yoursite.com/2019/12/08/2019-ICPC-Asia-Nanchang-Onsite-F-Dynamic-Suffix-Array/</id>
    <published>2019-12-08T08:25:17.000Z</published>
    <updated>2019-12-08T08:28:29.368Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://codeforces.com/gym/259514/problem/F" target="_blank" rel="noopener">https://codeforces.com/gym/259514/problem/F</a><br>思路：现场想了个假性质，以为直接倒着删就完了。。。结果发现完全错的。<br>题目有强调数据随机生成，用概率算一下前15位都一样的概率基本为0，这样我们先把所有询问读进来，前十五位拉出来排序离散化，然后开bit动态维护所有后缀大于等于15的点，小于15的点手动暴力查询，这样对于每一个询问我们只用先把他的后缀串查一下在离散化里的排名，然后bit求一下前缀和，再和那些没有满15的后缀点进行暴力比较，统计有多少地方答案比他小即可。<br><a id="more"></a><br>代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;ll&gt; vl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;pii&gt; vp;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> db eps = <span class="number">1e-10</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ep emplace</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> copy(a, b) memcpy(a, b, sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PA cout &lt;&lt; <span class="meta-string">"pass\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x &amp; -x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) x.begin(), x.end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TM cout &lt;&lt; db(clock()) / CLOCKS_PER_SEC &lt;&lt; <span class="meta-string">'\n'</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; pos;</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">233</span>;</span><br><span class="line"><span class="keyword">int</span> op[maxn], a[maxn];</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> num[maxn];</span><br><span class="line"><span class="keyword">int</span> c[maxn];</span><br><span class="line"><span class="built_in">string</span> now[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x &lt; maxn)&#123;</span><br><span class="line">        c[x] += d;</span><br><span class="line">        x += lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">        ret += c[x];</span><br><span class="line">        x -= lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;op[i]);</span><br><span class="line">        <span class="keyword">if</span>(op[i] == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">char</span> ch[<span class="number">2</span>];</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, ch);</span><br><span class="line">            s[++len] = ch[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">        num[i] = len;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len - <span class="number">14</span>; i++)&#123;</span><br><span class="line">        now[i] = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt;= i + <span class="number">14</span>; j++) now[i] += s[j];</span><br><span class="line">        pos.eb(now[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sort(all(pos));</span><br><span class="line">    pos.resize(unique(all(pos)) - pos.begin());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(op[i] == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(num[i] &gt;= <span class="number">15</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> p = lower_bound(all(pos), now[num[i] - <span class="number">14</span>]) - pos.begin() + <span class="number">1</span>;</span><br><span class="line">                add(p, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i] &lt;= num[i] - <span class="number">14</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> p = upper_bound(all(pos), now[a[i]]) - pos.begin();</span><br><span class="line">                <span class="keyword">int</span> res = query(p);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = max(<span class="number">1</span>, num[i] - <span class="number">13</span>); j &lt;= num[i]; j++)&#123;</span><br><span class="line">                    <span class="built_in">string</span> tt = <span class="string">""</span>;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k = j; k &lt;= num[i]; k++)&#123;</span><br><span class="line">                        tt += s[k];</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(now[a[i]] &gt; tt) res++;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, res);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">string</span> tmp = <span class="string">""</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = a[i]; j &lt;= num[i]; j++) tmp += s[j];</span><br><span class="line">                <span class="keyword">int</span> p = upper_bound(all(pos), tmp) - pos.begin();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> res = query(p);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = max(<span class="number">1</span>, num[i] - <span class="number">13</span>); j &lt;= num[i]; j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(a[i] == j) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="built_in">string</span> tt = <span class="string">""</span>;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k = j; k &lt;= num[i]; k++) tt += s[k];</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span>(tmp &gt; tt) res++;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, res + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接：&lt;a href=&quot;https://codeforces.com/gym/259514/problem/F&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://codeforces.com/gym/259514/problem/F&lt;/a&gt;&lt;br&gt;思路：现场想了个假性质，以为直接倒着删就完了。。。结果发现完全错的。&lt;br&gt;题目有强调数据随机生成，用概率算一下前15位都一样的概率基本为0，这样我们先把所有询问读进来，前十五位拉出来排序离散化，然后开bit动态维护所有后缀大于等于15的点，小于15的点手动暴力查询，这样对于每一个询问我们只用先把他的后缀串查一下在离散化里的排名，然后bit求一下前缀和，再和那些没有满15的后缀点进行暴力比较，统计有多少地方答案比他小即可。&lt;br&gt;
    
    </summary>
    
      <category term="暴力" scheme="http://yoursite.com/categories/%E6%9A%B4%E5%8A%9B/"/>
    
    
  </entry>
  
  <entry>
    <title>2019 ICPC Asia Nanchang Onsite-K(Tree)</title>
    <link href="http://yoursite.com/2019/12/08/2019-ICPC-Asia-Nanchang-Onsite-K-Tree/"/>
    <id>http://yoursite.com/2019/12/08/2019-ICPC-Asia-Nanchang-Onsite-K-Tree/</id>
    <published>2019-12-08T08:13:28.000Z</published>
    <updated>2019-12-08T08:33:04.735Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://codeforces.com/gym/259514/problem/K" target="_blank" rel="noopener">https://codeforces.com/gym/259514/problem/K</a><br>思路：</p><h4 id="dsu-on-tree"><a href="#dsu-on-tree" class="headerlink" title="dsu on tree"></a>dsu on tree</h4><p>dsu on tree又称树上启发式合并，统计的是树上 每一个子树内的某种信息，朴素的做法是枚举每个子树进行统计，复杂度是<script type="math/tex">O(n^2)</script>的，dsu on tree利用了树的特性，继承重儿子的信息，这样只有轻儿子的信息会被清除，可以证明如果没有其他额外操作的话，复杂度是<script type="math/tex">O(nlogn)</script></p><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><p>1、统计每个轻儿子内部的答案，并清除这些点的影响。<br>2、统计重儿子内部的答案，保留重儿子的信息。<br>3、补充上轻儿子的信息，并同时统计当前树内需要的答案。<br>4、补上这个点的贡献<br>5、根据是否是父节点的重儿子决定是否清空这个树内的贡献</p><h4 id="本题"><a href="#本题" class="headerlink" title="本题"></a>本题</h4><p>考虑本题，由于点对不能有辈分关系，那么我们考虑每一个点对我们都在他们的lca处统计。由于还要满足<script type="math/tex">w[u] + w[v] = 2 * w[lca]</script>，并且<script type="math/tex">d_{uv} \leq k</script>，这里可以用平衡树来维护（pbds真好用），同时进行dsu on tree，对于更新我们采用先统计某一个子树的对答案的贡献，再把整个子树更新上去的方法，复杂度<script type="math/tex">O(nlognlogn)</script>。<br><a id="more"></a><br>代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/extc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">233</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;ll&gt; vl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;pii&gt; vp;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> db eps = <span class="number">1e-10</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ep emplace</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> copy(a, b) memcpy(a, b, sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PA cout &lt;&lt; <span class="meta-string">"pass\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x &amp; -x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) x.begin(), x.end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TM cout &lt;&lt; db(clock()) / CLOCKS_PER_SEC &lt;&lt; <span class="meta-string">'\n'</span></span></span><br><span class="line"></span><br><span class="line">tree&lt;pii, null_type, less&lt;pii&gt;, rb_tree_tag, tree_order_statistics_node_update&gt; tr[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> w[maxn];</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line">vi G[maxn];</span><br><span class="line"><span class="keyword">int</span> son[maxn], sz[maxn], d[maxn];</span><br><span class="line">ll res;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    sz[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;v : G[u])&#123;</span><br><span class="line">        d[v] = d[u] + <span class="number">1</span>;</span><br><span class="line">        dfs(v);</span><br><span class="line">        sz[u] += sz[v];</span><br><span class="line">        <span class="keyword">if</span>(sz[v] &gt; sz[son[u]]) son[u] = v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getans</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> lca)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">2</span> * w[lca] - w[u];</span><br><span class="line">    <span class="keyword">if</span>(x &gt;= <span class="number">0</span>) res += tr[x].order_of_key(pii(k + <span class="number">2</span> * d[lca] - d[u], inf));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;v : G[u])&#123;</span><br><span class="line">        getans(v, lca);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> lca, <span class="keyword">int</span> op)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(op == <span class="number">1</span>) tr[w[u]].insert(pii(d[u], u));</span><br><span class="line">    <span class="keyword">else</span> tr[w[u]].erase(pii(d[u], u));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;v : G[u])&#123;</span><br><span class="line">        update(v, lca, op);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">bool</span> ok)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;v : G[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v == son[u]) <span class="keyword">continue</span>;</span><br><span class="line">        dfs2(v, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(son[u]) dfs2(son[u], <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;v : G[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v == son[u]) <span class="keyword">continue</span>;</span><br><span class="line">        getans(v, u);</span><br><span class="line">        update(v, u, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    tr[w[u]].insert(pii(d[u], u));</span><br><span class="line">    <span class="keyword">if</span>(!ok) update(u, u, <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;w[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> u;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;u);</span><br><span class="line">        G[u].eb(i);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>);</span><br><span class="line">    dfs2(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, <span class="number">2</span> * res);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接：&lt;a href=&quot;https://codeforces.com/gym/259514/problem/K&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://codeforces.com/gym/259514/problem/K&lt;/a&gt;&lt;br&gt;思路：&lt;/p&gt;
&lt;h4 id=&quot;dsu-on-tree&quot;&gt;&lt;a href=&quot;#dsu-on-tree&quot; class=&quot;headerlink&quot; title=&quot;dsu on tree&quot;&gt;&lt;/a&gt;dsu on tree&lt;/h4&gt;&lt;p&gt;dsu on tree又称树上启发式合并，统计的是树上 每一个子树内的某种信息，朴素的做法是枚举每个子树进行统计，复杂度是&lt;script type=&quot;math/tex&quot;&gt;O(n^2)&lt;/script&gt;的，dsu on tree利用了树的特性，继承重儿子的信息，这样只有轻儿子的信息会被清除，可以证明如果没有其他额外操作的话，复杂度是&lt;script type=&quot;math/tex&quot;&gt;O(nlogn)&lt;/script&gt;&lt;/p&gt;
&lt;h4 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步骤&quot; class=&quot;headerlink&quot; title=&quot;步骤&quot;&gt;&lt;/a&gt;步骤&lt;/h4&gt;&lt;p&gt;1、统计每个轻儿子内部的答案，并清除这些点的影响。&lt;br&gt;2、统计重儿子内部的答案，保留重儿子的信息。&lt;br&gt;3、补充上轻儿子的信息，并同时统计当前树内需要的答案。&lt;br&gt;4、补上这个点的贡献&lt;br&gt;5、根据是否是父节点的重儿子决定是否清空这个树内的贡献&lt;/p&gt;
&lt;h4 id=&quot;本题&quot;&gt;&lt;a href=&quot;#本题&quot; class=&quot;headerlink&quot; title=&quot;本题&quot;&gt;&lt;/a&gt;本题&lt;/h4&gt;&lt;p&gt;考虑本题，由于点对不能有辈分关系，那么我们考虑每一个点对我们都在他们的lca处统计。由于还要满足&lt;script type=&quot;math/tex&quot;&gt;w[u] + w[v] = 2 * w[lca]&lt;/script&gt;，并且&lt;script type=&quot;math/tex&quot;&gt;d_{uv} \leq k&lt;/script&gt;，这里可以用平衡树来维护（pbds真好用），同时进行dsu on tree，对于更新我们采用先统计某一个子树的对答案的贡献，再把整个子树更新上去的方法，复杂度&lt;script type=&quot;math/tex&quot;&gt;O(nlognlogn)&lt;/script&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="dsu on tree" scheme="http://yoursite.com/categories/dsu-on-tree/"/>
    
    
  </entry>
  
  <entry>
    <title>Educational Codeforces Round 7-F(The Sum of the k-th Powers)</title>
    <link href="http://yoursite.com/2019/11/30/Educational-Codeforces-Round-7-F-The-Sum-of-the-k-th-Powers/"/>
    <id>http://yoursite.com/2019/11/30/Educational-Codeforces-Round-7-F-The-Sum-of-the-k-th-Powers/</id>
    <published>2019-11-30T15:49:10.000Z</published>
    <updated>2019-11-30T16:04:44.608Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://codeforces.com/contest/622/problem/F" target="_blank" rel="noopener">https://codeforces.com/contest/622/problem/F</a><br>思路：咕咕咕了这么久重新回来了，一切重新开始吧。。</p><h4 id="拉格朗日插值法"><a href="#拉格朗日插值法" class="headerlink" title="拉格朗日插值法"></a>拉格朗日插值法</h4><p>假设我们知道某个多项式最高项是n次的且知道n + 1个点，那么我们可以用如下公式构造多项式：</p><script type="math/tex; mode=display">f(x) = \sum_{i = 0}^n\prod_{j \ne i}\frac{x - x_j}{x_i - x_j}y_i</script><p>复杂度是<script type="math/tex">O(n^2)</script>的，但如果<script type="math/tex">x_i</script>的值是连续的，我们可以预处理阶乘和逆元将它变为<script type="math/tex">O(n)</script></p><h4 id="自然数k次幂前缀和"><a href="#自然数k次幂前缀和" class="headerlink" title="自然数k次幂前缀和"></a>自然数k次幂前缀和</h4><p>形如<script type="math/tex">1^k + 2^k + 3^k + \cdots + n^k</script>称为自然数k次幂前缀和，其处理方法一般有三种：伯努利数，拉格朗日插值，斯特林数。鉴于我现在只会拉格朗日插值的方法，剩下的就待补吧。。。<br>自然数k次幂前缀和可以表示为k + 1次多项式，这个证明在组合数学书的第7章卡特兰数的部分有介绍，那么我们就可以暴力算出k + 2项的值，因为满足连续性质，就可以预处理阶乘快速插值。当单组询问时，我们可以预处理分母的后缀积。<br>如果多组询问分母x变化怎么办呢，我们发现k + 1项中分母每次都只少了一个不同的部分，我们可以先求出所有部分的积，然后少的部分用逆元去掉即可，这样也可以做到单组O(k)的查询了。<br><a id="more"></a><br>代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;ll&gt; vl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;pii&gt; vp;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> db eps = <span class="number">1e-10</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ep emplace</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> copy(a, b) memcpy(a, b, sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PA cout &lt;&lt; <span class="meta-string">"pass\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x &amp; -x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) x.begin(), x.end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TM cout &lt;&lt; db(clock()) / CLOCKS_PER_SEC &lt;&lt; <span class="meta-string">'\n'</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">233</span>;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="keyword">int</span> x[maxn], y[maxn];</span><br><span class="line"><span class="keyword">int</span> fac[maxn], inv[maxn];</span><br><span class="line"><span class="keyword">int</span> suf[maxn];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pow_mod</span><span class="params">(<span class="keyword">int</span> q, <span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(w)&#123;</span><br><span class="line">        <span class="keyword">if</span>(w &amp; <span class="number">1</span>) ret = <span class="number">1l</span>l * ret * q % mod;</span><br><span class="line">        q = <span class="number">1l</span>l * q * q % mod;</span><br><span class="line">        w &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>), <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;k);</span><br><span class="line">    suf[<span class="number">0</span>] = fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k + <span class="number">2</span>; i++) suf[i] = <span class="number">1l</span>l * suf[i - <span class="number">1</span>] * (n - i) % mod, fac[i] = <span class="number">1l</span>l * fac[i - <span class="number">1</span>] * i % mod, inv[i] = pow_mod(fac[i], mod - <span class="number">2</span>), x[i] = i, y[i] = (y[i - <span class="number">1</span>] + pow_mod(i, k)) % mod;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(n &lt;= k + <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, y[n]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k + <span class="number">2</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = <span class="number">1l</span>l * fac[i - <span class="number">1</span>] * fac[k + <span class="number">2</span> - i] % mod;</span><br><span class="line">        <span class="keyword">if</span>(k + <span class="number">2</span> - i &amp; <span class="number">1</span>) tmp = (mod - tmp) % mod;</span><br><span class="line">        tmp = pow_mod(tmp, mod - <span class="number">2</span>);</span><br><span class="line">        res = (res + <span class="number">1l</span>l * y[i] * tmp % mod * suf[k + <span class="number">2</span>] % mod * pow_mod(n - i, mod - <span class="number">2</span>)) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, res);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接：&lt;a href=&quot;https://codeforces.com/contest/622/problem/F&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://codeforces.com/contest/622/problem/F&lt;/a&gt;&lt;br&gt;思路：咕咕咕了这么久重新回来了，一切重新开始吧。。&lt;/p&gt;
&lt;h4 id=&quot;拉格朗日插值法&quot;&gt;&lt;a href=&quot;#拉格朗日插值法&quot; class=&quot;headerlink&quot; title=&quot;拉格朗日插值法&quot;&gt;&lt;/a&gt;拉格朗日插值法&lt;/h4&gt;&lt;p&gt;假设我们知道某个多项式最高项是n次的且知道n + 1个点，那么我们可以用如下公式构造多项式：&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;f(x) = \sum_{i = 0}^n\prod_{j \ne i}\frac{x - x_j}{x_i - x_j}y_i&lt;/script&gt;&lt;p&gt;复杂度是&lt;script type=&quot;math/tex&quot;&gt;O(n^2)&lt;/script&gt;的，但如果&lt;script type=&quot;math/tex&quot;&gt;x_i&lt;/script&gt;的值是连续的，我们可以预处理阶乘和逆元将它变为&lt;script type=&quot;math/tex&quot;&gt;O(n)&lt;/script&gt;&lt;/p&gt;
&lt;h4 id=&quot;自然数k次幂前缀和&quot;&gt;&lt;a href=&quot;#自然数k次幂前缀和&quot; class=&quot;headerlink&quot; title=&quot;自然数k次幂前缀和&quot;&gt;&lt;/a&gt;自然数k次幂前缀和&lt;/h4&gt;&lt;p&gt;形如&lt;script type=&quot;math/tex&quot;&gt;1^k + 2^k + 3^k + \cdots + n^k&lt;/script&gt;称为自然数k次幂前缀和，其处理方法一般有三种：伯努利数，拉格朗日插值，斯特林数。鉴于我现在只会拉格朗日插值的方法，剩下的就待补吧。。。&lt;br&gt;自然数k次幂前缀和可以表示为k + 1次多项式，这个证明在组合数学书的第7章卡特兰数的部分有介绍，那么我们就可以暴力算出k + 2项的值，因为满足连续性质，就可以预处理阶乘快速插值。当单组询问时，我们可以预处理分母的后缀积。&lt;br&gt;如果多组询问分母x变化怎么办呢，我们发现k + 1项中分母每次都只少了一个不同的部分，我们可以先求出所有部分的积，然后少的部分用逆元去掉即可，这样也可以做到单组O(k)的查询了。&lt;br&gt;
    
    </summary>
    
      <category term="拉格朗日插值法" scheme="http://yoursite.com/categories/%E6%8B%89%E6%A0%BC%E6%9C%97%E6%97%A5%E6%8F%92%E5%80%BC%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>The 2019 China Collegiate Programming Contest Harbin Site-A(Artful Paintings)</title>
    <link href="http://yoursite.com/2019/11/05/The-2019-China-Collegiate-Programming-Contest-Harbin-Site-A-Artful-Paintings/"/>
    <id>http://yoursite.com/2019/11/05/The-2019-China-Collegiate-Programming-Contest-Harbin-Site-A-Artful-Paintings/</id>
    <published>2019-11-05T15:30:41.000Z</published>
    <updated>2019-11-05T15:44:23.499Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://codeforces.com/gym/102394/problem/A" target="_blank" rel="noopener">https://codeforces.com/gym/102394/problem/A</a><br>思路：很久没更了，最近实在太忙了，可能是icpc出征前最后一更？希望今年能有好成绩吧。。感觉自己以前都学了假的差分约束系统</p><h4 id="差分约束系统"><a href="#差分约束系统" class="headerlink" title="差分约束系统"></a>差分约束系统</h4><p>现在有一堆不等式<script type="math/tex">x_i - x_j \leq k</script>或者<script type="math/tex">x_i - x_j \geq k</script>，最后我们要求<script type="math/tex">x_p - x_q</script>的最大值或者最小值，其中<script type="math/tex">x_q</script>的值已经给定。<br>考虑最短路模型，其实两点之间的最短路模型就满足<script type="math/tex">d_u + w >= d_v</script>，所以由此我们受到启发，可以用最短路解决这种约束问题。</p><h4 id="建图方式"><a href="#建图方式" class="headerlink" title="建图方式"></a>建图方式</h4><p>这里有个结论，我们假设要求的是<script type="math/tex">x_n - x_1</script>，其中<script type="math/tex">x_1</script>已知，如果我们要求最大值，那么我们要跑最短路，如果求最小值，我们跑最长路（自行证明）。<br>最大值：<br>把所有约束整理成<script type="math/tex">d_u + w \geq d_v</script>的形式，然后从u到v连一条长度为w的边，最后跑最短路即可。<br>最小值：<br>把所有约束整理成<script type="math/tex">d_u + w \leq d_v</script>的形式，然后从u到v连一条长度为w的边，最后跑最长路即可。</p><h4 id="一些技巧"><a href="#一些技巧" class="headerlink" title="一些技巧"></a>一些技巧</h4><p>如果是大于小于怎么办呢，很简单那就+1或者-1调整一下即可。<br>如果是等于号怎么办呢，考虑拆成一个大于等于和一个小于等于，建两条边即可。</p><p>本题观察发现，涂的cube越多越容易满足，所以总数量满足二分性质。我们考虑构造数量的前缀，这样区间数量就变成两个前缀相减，就可以构造差分方程，由于是求sum[r] - sum[0]的最小值，我们要跑最长路。<br>对于第一种操作，我们从l - 1向r连一条长度为k的边<br>对于第二种操作，我们从r向l - 1连一条长度为k - mid的边（mid为二分值）<br>相邻两个的差在0和1之间，连两条边<br>特别特别别忘了，总的数量是mid，所以0到n连两条边，最后跑看是否有解即可。<br>本题还有没有log的做法，据说很难，就不补了。<br><a id="more"></a><br>代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;ll&gt; vl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;pii&gt; vp;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> db eps = <span class="number">1e-10</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ep emplace</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> copy(a, b) memcpy(a, b, sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PA cout &lt;&lt; <span class="meta-string">"pass\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x &amp; -x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) x.begin(), x.end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TM cout &lt;&lt; db(clock()) / CLOCKS_PER_SEC &lt;&lt; <span class="meta-string">'\n'</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">6010</span>;</span><br><span class="line"><span class="keyword">int</span> n, T, m1, m2;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to,next,w;</span><br><span class="line">&#125;edges[<span class="number">3000</span> * <span class="number">3010</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> g[maxn], idx;</span><br><span class="line"><span class="keyword">bool</span> inq[maxn];</span><br><span class="line"><span class="keyword">int</span> d[maxn];</span><br><span class="line"><span class="keyword">int</span> cnt[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> l[maxn * <span class="number">2</span>], r[maxn * <span class="number">2</span>], k[maxn * <span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> Q[<span class="number">3010</span> * <span class="number">3010</span> * <span class="number">2</span>], head, tail;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    idx = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">memset</span>(g, <span class="number">-1</span>, <span class="keyword">sizeof</span>(g));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    edges[idx].to = v;</span><br><span class="line">    edges[idx].w = w;</span><br><span class="line">    edges[idx].next = g[u];</span><br><span class="line">    g[u] = idx;</span><br><span class="line">    idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        d[i] = <span class="number">-1e9</span>;</span><br><span class="line">        cnt[i] = inq[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    d[s] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    head = tail = <span class="number">0</span>;</span><br><span class="line">    Q[head] = s;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (head &lt;= tail) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = Q[head];</span><br><span class="line">        head++;</span><br><span class="line">        inq[u] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = g[u]; i != <span class="number">-1</span>; i = edges[i].next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (d[edges[i].to] &lt; d[u] + edges[i].w) &#123;</span><br><span class="line">                d[edges[i].to] = d[u] + edges[i].w;</span><br><span class="line">                <span class="keyword">if</span> (!inq[edges[i].to]) &#123;</span><br><span class="line">                    Q[++tail] = edges[i].to;</span><br><span class="line">                    inq[edges[i].to] = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">if</span> (++cnt[edges[i].to] &gt; n + <span class="number">3</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;n, &amp;m1, &amp;m2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m1; i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;l[i], &amp;r[i], &amp;k[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = m1 + <span class="number">1</span>; i &lt;= m1 + m2; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;l[i], &amp;r[i], &amp;k[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> lb = <span class="number">0</span>, ub = n, ans = n;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(ub &gt;= lb)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = ub + lb &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            init();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m1; ++i) &#123;</span><br><span class="line">                addedge(l[i] - <span class="number">1</span>, r[i], k[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = m1 + <span class="number">1</span>; i &lt;= m1 + m2; i++)&#123;</span><br><span class="line">                addedge(r[i], l[i] - <span class="number">1</span>, k[i] - mid);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                addedge(i + <span class="number">1</span>, i, <span class="number">-1</span>);</span><br><span class="line">                addedge(i, i + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            addedge(<span class="number">0</span>, n, mid);</span><br><span class="line">            spfa(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span>(mid &gt;= d[n]) ub = mid - <span class="number">1</span>, ans = mid;</span><br><span class="line">            <span class="keyword">else</span> lb = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接：&lt;a href=&quot;https://codeforces.com/gym/102394/problem/A&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://codeforces.com/gym/102394/problem/A&lt;/a&gt;&lt;br&gt;思路：很久没更了，最近实在太忙了，可能是icpc出征前最后一更？希望今年能有好成绩吧。。感觉自己以前都学了假的差分约束系统&lt;/p&gt;
&lt;h4 id=&quot;差分约束系统&quot;&gt;&lt;a href=&quot;#差分约束系统&quot; class=&quot;headerlink&quot; title=&quot;差分约束系统&quot;&gt;&lt;/a&gt;差分约束系统&lt;/h4&gt;&lt;p&gt;现在有一堆不等式&lt;script type=&quot;math/tex&quot;&gt;x_i - x_j \leq k&lt;/script&gt;或者&lt;script type=&quot;math/tex&quot;&gt;x_i - x_j \geq k&lt;/script&gt;，最后我们要求&lt;script type=&quot;math/tex&quot;&gt;x_p - x_q&lt;/script&gt;的最大值或者最小值，其中&lt;script type=&quot;math/tex&quot;&gt;x_q&lt;/script&gt;的值已经给定。&lt;br&gt;考虑最短路模型，其实两点之间的最短路模型就满足&lt;script type=&quot;math/tex&quot;&gt;d_u + w &gt;= d_v&lt;/script&gt;，所以由此我们受到启发，可以用最短路解决这种约束问题。&lt;/p&gt;
&lt;h4 id=&quot;建图方式&quot;&gt;&lt;a href=&quot;#建图方式&quot; class=&quot;headerlink&quot; title=&quot;建图方式&quot;&gt;&lt;/a&gt;建图方式&lt;/h4&gt;&lt;p&gt;这里有个结论，我们假设要求的是&lt;script type=&quot;math/tex&quot;&gt;x_n - x_1&lt;/script&gt;，其中&lt;script type=&quot;math/tex&quot;&gt;x_1&lt;/script&gt;已知，如果我们要求最大值，那么我们要跑最短路，如果求最小值，我们跑最长路（自行证明）。&lt;br&gt;最大值：&lt;br&gt;把所有约束整理成&lt;script type=&quot;math/tex&quot;&gt;d_u + w \geq d_v&lt;/script&gt;的形式，然后从u到v连一条长度为w的边，最后跑最短路即可。&lt;br&gt;最小值：&lt;br&gt;把所有约束整理成&lt;script type=&quot;math/tex&quot;&gt;d_u + w \leq d_v&lt;/script&gt;的形式，然后从u到v连一条长度为w的边，最后跑最长路即可。&lt;/p&gt;
&lt;h4 id=&quot;一些技巧&quot;&gt;&lt;a href=&quot;#一些技巧&quot; class=&quot;headerlink&quot; title=&quot;一些技巧&quot;&gt;&lt;/a&gt;一些技巧&lt;/h4&gt;&lt;p&gt;如果是大于小于怎么办呢，很简单那就+1或者-1调整一下即可。&lt;br&gt;如果是等于号怎么办呢，考虑拆成一个大于等于和一个小于等于，建两条边即可。&lt;/p&gt;
&lt;p&gt;本题观察发现，涂的cube越多越容易满足，所以总数量满足二分性质。我们考虑构造数量的前缀，这样区间数量就变成两个前缀相减，就可以构造差分方程，由于是求sum[r] - sum[0]的最小值，我们要跑最长路。&lt;br&gt;对于第一种操作，我们从l - 1向r连一条长度为k的边&lt;br&gt;对于第二种操作，我们从r向l - 1连一条长度为k - mid的边（mid为二分值）&lt;br&gt;相邻两个的差在0和1之间，连两条边&lt;br&gt;特别特别别忘了，总的数量是mid，所以0到n连两条边，最后跑看是否有解即可。&lt;br&gt;本题还有没有log的做法，据说很难，就不补了。&lt;br&gt;
    
    </summary>
    
      <category term="差分约束系统" scheme="http://yoursite.com/categories/%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F%E7%B3%BB%E7%BB%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>2018-2019 ACM-ICPC, Asia Shenyang Regional Contest-M(Renaissance Past in Nancy)</title>
    <link href="http://yoursite.com/2019/10/05/2018-2019-ACM-ICPC-Asia-Shenyang-Regional-Contest-M-Renaissance-Past-in-Nancy/"/>
    <id>http://yoursite.com/2019/10/05/2018-2019-ACM-ICPC-Asia-Shenyang-Regional-Contest-M-Renaissance-Past-in-Nancy/</id>
    <published>2019-10-05T10:31:12.000Z</published>
    <updated>2019-10-05T11:38:03.692Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://codeforces.com/gym/101955/problem/M" target="_blank" rel="noopener">https://codeforces.com/gym/101955/problem/M</a><br>思路：这个题是可逆背包基于生成函数的一个应用，我们先来了解一下可逆背包。</p><h4 id="可逆背包"><a href="#可逆背包" class="headerlink" title="可逆背包"></a>可逆背包</h4><p>一般的背包可能是需要取max，或者求方案数等运算，我们把这里面运算可逆的称为可逆背包。比如取max就不是可逆背包，因为如果我们取max，如果退掉一个物品的贡献，我们没法把结果退回去，但如果是求方案数，我们可以把根据背包的dp顺序倒着把贡献退回去，这样的背包叫做可逆背包。</p><h4 id="可逆背包与生成函数"><a href="#可逆背包与生成函数" class="headerlink" title="可逆背包与生成函数"></a>可逆背包与生成函数</h4><p>考虑一个物品的重量为a，有b个（如果是多重背包）。<br>那么我们写出几种背包的生成函数：<br>01背包：<script type="math/tex">1 + x^a</script><br>01退背包：<script type="math/tex">1 - x^a</script><br>完全背包：<script type="math/tex">\sum_{i = 0}^{\infty}x^{ai} = \frac{1}{1 - x^a}</script><br>多重背包：<script type="math/tex">\sum_{i = 0}^{b}x^{ai} = \frac{1 - x^{a(b + 1)}}{1 - x^a}</script><br>不知道是否观察出了什么性质？通过生成函数我们可以得知，在背包是可逆背包的情况下，多重背包可以由一个完全重量为a的完全背包和一个重量为a(b + 1)的01退背包得到，它们俩得到的东西是完全一样的。<br>那么我们如果要退掉这个背包的贡献怎么办呢，考虑在生成函数上，退掉它就是乘一个它的倒数，那么转换为背包上，就是以a(b + 1)重量做一个完全背包和a做一个01退背包。</p><h4 id="本题"><a href="#本题" class="headerlink" title="本题"></a>本题</h4><p>在本题中，我们可以对多重背包维护一个前缀和f，对多重可逆背包也维护一个前缀和g，那么考虑[l, r]区间的方案数，最终答案就是<script type="math/tex">f[x] * g[y] (x + y = c)</script></p><h4 id="一些思考"><a href="#一些思考" class="headerlink" title="一些思考"></a>一些思考</h4><p>背包其实和多项式在一定程度上是完全相同的，背包的方案数就对应了多项式的系数，两个背包合并对应了多项式乘法，所以求解是两个前缀背包合并的本质是在做一个卷积。<br><a id="more"></a><br>代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;ll&gt; vl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;pii&gt; vp;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> db eps = <span class="number">1e-10</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ep emplace</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> copy(a, b) memcpy(a, b, sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PA cout &lt;&lt; <span class="meta-string">"pass\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x &amp; -x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) x.begin(), x.end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TM cout &lt;&lt; db(clock()) / CLOCKS_PER_SEC &lt;&lt; <span class="meta-string">'\n'</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T, n, m;</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">10010</span>][<span class="number">1010</span>], g[<span class="number">10010</span>][<span class="number">1010</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    x += y;</span><br><span class="line">    <span class="keyword">if</span>(x &gt;= mod) x -= mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    x -= y;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>) x += mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> *f, <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i + x &lt;= <span class="number">1000</span>; i++) add(f[i + x], f[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> *f, <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1000</span>; i &gt;= x; i--) sub(f[i], f[i - x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>), <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">int</span> kase = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Case #"</span> &lt;&lt; ++kase &lt;&lt; <span class="string">":\n"</span>;</span><br><span class="line">        <span class="keyword">int</span> last = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        g[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> a, b;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; b &gt;&gt; a;</span><br><span class="line">            copy(f[i], f[i - <span class="number">1</span>]);</span><br><span class="line">            copy(g[i], g[i - <span class="number">1</span>]);</span><br><span class="line">            insert(f[i], a);</span><br><span class="line">            move(f[i], a * (b + <span class="number">1</span>));</span><br><span class="line">            insert(g[i], a * (b + <span class="number">1</span>));</span><br><span class="line">            move(g[i], a);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">1000</span>; j++)&#123;</span><br><span class="line">                add(f[i][j], f[i][j - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">            <span class="keyword">int</span> l, r, c;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; l &gt;&gt; r &gt;&gt; c;</span><br><span class="line">            <span class="keyword">int</span> t1 = (l + last) % n + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> t2 = (r + last) % n + <span class="number">1</span>;</span><br><span class="line">            l = min(t1, t2), r = max(t1, t2);</span><br><span class="line">            <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= c; i++)  add(res, <span class="number">1l</span>l * f[r][i] * g[l - <span class="number">1</span>][c - i] % mod);</span><br><span class="line">            last = res;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接：&lt;a href=&quot;https://codeforces.com/gym/101955/problem/M&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://codeforces.com/gym/101955/problem/M&lt;/a&gt;&lt;br&gt;思路：这个题是可逆背包基于生成函数的一个应用，我们先来了解一下可逆背包。&lt;/p&gt;
&lt;h4 id=&quot;可逆背包&quot;&gt;&lt;a href=&quot;#可逆背包&quot; class=&quot;headerlink&quot; title=&quot;可逆背包&quot;&gt;&lt;/a&gt;可逆背包&lt;/h4&gt;&lt;p&gt;一般的背包可能是需要取max，或者求方案数等运算，我们把这里面运算可逆的称为可逆背包。比如取max就不是可逆背包，因为如果我们取max，如果退掉一个物品的贡献，我们没法把结果退回去，但如果是求方案数，我们可以把根据背包的dp顺序倒着把贡献退回去，这样的背包叫做可逆背包。&lt;/p&gt;
&lt;h4 id=&quot;可逆背包与生成函数&quot;&gt;&lt;a href=&quot;#可逆背包与生成函数&quot; class=&quot;headerlink&quot; title=&quot;可逆背包与生成函数&quot;&gt;&lt;/a&gt;可逆背包与生成函数&lt;/h4&gt;&lt;p&gt;考虑一个物品的重量为a，有b个（如果是多重背包）。&lt;br&gt;那么我们写出几种背包的生成函数：&lt;br&gt;01背包：&lt;script type=&quot;math/tex&quot;&gt;1 + x^a&lt;/script&gt;&lt;br&gt;01退背包：&lt;script type=&quot;math/tex&quot;&gt;1 - x^a&lt;/script&gt;&lt;br&gt;完全背包：&lt;script type=&quot;math/tex&quot;&gt;\sum_{i = 0}^{\infty}x^{ai} = \frac{1}{1 - x^a}&lt;/script&gt;&lt;br&gt;多重背包：&lt;script type=&quot;math/tex&quot;&gt;\sum_{i = 0}^{b}x^{ai} = \frac{1 - x^{a(b + 1)}}{1 - x^a}&lt;/script&gt;&lt;br&gt;不知道是否观察出了什么性质？通过生成函数我们可以得知，在背包是可逆背包的情况下，多重背包可以由一个完全重量为a的完全背包和一个重量为a(b + 1)的01退背包得到，它们俩得到的东西是完全一样的。&lt;br&gt;那么我们如果要退掉这个背包的贡献怎么办呢，考虑在生成函数上，退掉它就是乘一个它的倒数，那么转换为背包上，就是以a(b + 1)重量做一个完全背包和a做一个01退背包。&lt;/p&gt;
&lt;h4 id=&quot;本题&quot;&gt;&lt;a href=&quot;#本题&quot; class=&quot;headerlink&quot; title=&quot;本题&quot;&gt;&lt;/a&gt;本题&lt;/h4&gt;&lt;p&gt;在本题中，我们可以对多重背包维护一个前缀和f，对多重可逆背包也维护一个前缀和g，那么考虑[l, r]区间的方案数，最终答案就是&lt;script type=&quot;math/tex&quot;&gt;f[x] * g[y] (x + y = c)&lt;/script&gt;&lt;/p&gt;
&lt;h4 id=&quot;一些思考&quot;&gt;&lt;a href=&quot;#一些思考&quot; class=&quot;headerlink&quot; title=&quot;一些思考&quot;&gt;&lt;/a&gt;一些思考&lt;/h4&gt;&lt;p&gt;背包其实和多项式在一定程度上是完全相同的，背包的方案数就对应了多项式的系数，两个背包合并对应了多项式乘法，所以求解是两个前缀背包合并的本质是在做一个卷积。&lt;br&gt;
    
    </summary>
    
      <category term="生成函数" scheme="http://yoursite.com/categories/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/"/>
    
    
  </entry>
  
</feed>
